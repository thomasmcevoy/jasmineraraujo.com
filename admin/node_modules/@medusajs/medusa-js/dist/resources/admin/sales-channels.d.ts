import { AdminGetSalesChannelsParams, AdminPostSalesChannelsReq, AdminSalesChannelsRes, AdminPostSalesChannelsSalesChannelReq, AdminSalesChannelsDeleteRes, AdminSalesChannelsListRes, AdminDeleteSalesChannelsChannelProductsBatchReq, AdminPostSalesChannelsChannelProductsBatchReq } from "@medusajs/medusa";
import { ResponsePromise } from "../../typings";
import BaseResource from "../base";
declare class AdminSalesChannelsResource extends BaseResource {
    /** retrieve a sales channel
     * @experimental This feature is under development and may change in the future.
     * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
     * @description gets a sales channel
     * @returns a medusa sales channel
     */
    retrieve(salesChannelId: string, customHeaders?: Record<string, any>): ResponsePromise<AdminSalesChannelsRes>;
    create(payload: AdminPostSalesChannelsReq, customHeaders?: Record<string, any>): ResponsePromise<AdminSalesChannelsRes>;
    /** update a sales channel
     * @experimental This feature is under development and may change in the future.
     * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
     * @description updates a sales channel
     * @returns the updated medusa sales channel
     */
    update(salesChannelId: string, payload: AdminPostSalesChannelsSalesChannelReq, customHeaders?: Record<string, any>): ResponsePromise<AdminSalesChannelsRes>;
    /**
     * Retrieve a list of sales channels
     * @experimental This feature is under development and may change in the future.
     * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
     * @description Retrieve a list of sales channels
     * @returns the list of sales channel as well as the pagination properties
     */
    list(query?: AdminGetSalesChannelsParams, customHeaders?: Record<string, any>): ResponsePromise<AdminSalesChannelsListRes>;
    /**
     * Delete a sales channel
     * @experimental This feature is under development and may change in the future.
     * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
     * @description gets a sales channel
     * @returns an deletion result
     */
    delete(salesChannelId: string, customHeaders?: Record<string, any>): ResponsePromise<AdminSalesChannelsDeleteRes>;
    /**
     * Remove products from a sales channel
     * @experimental This feature is under development and may change in the future.
     * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
     * @description Remove products from a sales channel
     * @returns a medusa sales channel
     */
    removeProducts(salesChannelId: string, payload: AdminDeleteSalesChannelsChannelProductsBatchReq, customHeaders?: Record<string, any>): ResponsePromise<AdminSalesChannelsRes>;
    /**
     * Add products to a sales channel
     * @experimental This feature is under development and may change in the future.
     * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
     * @description Add products to a sales channel
     * @returns a medusa sales channel
     */
    addProducts(salesChannelId: string, payload: AdminPostSalesChannelsChannelProductsBatchReq, customHeaders?: Record<string, any>): ResponsePromise<AdminSalesChannelsRes>;
}
export default AdminSalesChannelsResource;
