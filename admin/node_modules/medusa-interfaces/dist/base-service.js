"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
var medusa_core_utils_1 = require("medusa-core-utils");
var typeorm_1 = require("typeorm");
/**
 * Common functionality for Services
 * @interface
 */
var BaseService = /** @class */ (function () {
    function BaseService() {
        this.decorators_ = [];
    }
    BaseService.prototype.withTransaction = function () {
        console.log("WARN: withTransaction called without custom implementation");
        return this;
    };
    /**
     * Used to build TypeORM queries.
     */
    BaseService.prototype.buildQuery_ = function (selector, config) {
        if (config === void 0) { config = {}; }
        var build = function (obj) {
            var where = Object.entries(obj).reduce(function (acc, _a) {
                var _b = __read(_a, 2), key = _b[0], value = _b[1];
                // Undefined values indicate that they have no significance to the query.
                // If the query is looking for rows where a column is not set it should use null instead of undefined
                if (typeof value === "undefined") {
                    return acc;
                }
                switch (true) {
                    case value instanceof typeorm_1.FindOperator:
                        acc[key] = value;
                        break;
                    case Array.isArray(value):
                        acc[key] = (0, typeorm_1.In)(__spreadArray([], __read(value), false));
                        break;
                    case value !== null && typeof value === "object":
                        var subquery_1 = [];
                        Object.entries(value).map(function (_a) {
                            var _b = __read(_a, 2), modifier = _b[0], val = _b[1];
                            switch (modifier) {
                                case "lt":
                                    subquery_1.push({ operator: "<", value: val });
                                    break;
                                case "gt":
                                    subquery_1.push({ operator: ">", value: val });
                                    break;
                                case "lte":
                                    subquery_1.push({ operator: "<=", value: val });
                                    break;
                                case "gte":
                                    subquery_1.push({ operator: ">=", value: val });
                                    break;
                                default:
                                    acc[key] = value;
                                    break;
                            }
                        });
                        if (subquery_1.length) {
                            acc[key] = (0, typeorm_1.Raw)(function (a) {
                                return subquery_1
                                    .map(function (s, index) { return "".concat(a, " ").concat(s.operator, " :").concat(index); })
                                    .join(" AND ");
                            }, subquery_1.map(function (s) { return s.value; }));
                        }
                        break;
                    default:
                        acc[key] = value;
                        break;
                }
                return acc;
            }, {});
            return where;
        };
        var query = {
            where: build(selector),
        };
        if ("deleted_at" in selector) {
            query.withDeleted = true;
        }
        if ("skip" in config) {
            query.skip = config.skip;
        }
        if ("take" in config) {
            query.take = config.take;
        }
        if ("relations" in config) {
            query.relations = config.relations;
        }
        if ("select" in config) {
            query.select = config.select;
        }
        if ("order" in config) {
            query.order = config.order;
        }
        return query;
    };
    /**
     * Confirms whether a given raw id is valid. Fails if the provided
     * id is null or undefined. The validate function takes an optional config
     * param, to support checking id prefix and length.
     * @param {string} rawId - the id to validate.
     * @param {object?} config - optional config
     * @returns {string} the rawId given that nothing failed
     */
    BaseService.prototype.validateId_ = function (rawId, config) {
        if (config === void 0) { config = {}; }
        var prefix = config.prefix, length = config.length;
        if (!rawId) {
            throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "Failed to validate id: ".concat(rawId));
        }
        if (prefix || length) {
            var _a = __read(rawId.split("_"), 2), pre = _a[0], rand = _a[1];
            if (prefix && pre !== prefix) {
                throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "The provided id: ".concat(rawId, " does not adhere to prefix constraint: ").concat(prefix));
            }
            if (length && length !== rand.length) {
                throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_DATA, "The provided id: ".concat(rawId, " does not adhere to length constraint: ").concat(length));
            }
        }
        return rawId;
    };
    BaseService.prototype.shouldRetryTransaction = function (err) {
        var code = typeof err === "object" ? String(err.code) : null;
        return code === "40001" || code === "40P01";
    };
    /**
     * Wraps some work within a transactional block. If the service already has
     * a transaction manager attached this will be reused, otherwise a new
     * transaction manager is created.
     * @param {function} work - the transactional work to be done
     * @param {string} isolation - the isolation level to be used for the work.
     * @return {any} the result of the transactional work
     */
    BaseService.prototype.atomicPhase_ = function (work, isolationOrErrorHandler, maybeErrorHandlerOrDontFail) {
        return __awaiter(this, void 0, void 0, function () {
            var errorHandler, isolation, dontFail, doWork, temp_1, doWork_1, result, error_1, error_2, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        errorHandler = maybeErrorHandlerOrDontFail;
                        isolation = isolationOrErrorHandler;
                        dontFail = false;
                        if (typeof isolationOrErrorHandler === "function") {
                            isolation = null;
                            errorHandler = isolationOrErrorHandler;
                            dontFail = !!maybeErrorHandlerOrDontFail;
                        }
                        if (!this.transactionManager_) return [3 /*break*/, 1];
                        doWork = function (m) { return __awaiter(_this, void 0, void 0, function () {
                            var result, error_3, queryRunner;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.manager_ = m;
                                        this.transactionManager_ = m;
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 8]);
                                        return [4 /*yield*/, work(m)];
                                    case 2:
                                        result = _a.sent();
                                        return [2 /*return*/, result];
                                    case 3:
                                        error_3 = _a.sent();
                                        if (!errorHandler) return [3 /*break*/, 7];
                                        queryRunner = this.transactionManager_.queryRunner;
                                        if (!queryRunner.isTransactionActive) return [3 /*break*/, 5];
                                        return [4 /*yield*/, queryRunner.rollbackTransaction()];
                                    case 4:
                                        _a.sent();
                                        _a.label = 5;
                                    case 5: return [4 /*yield*/, errorHandler(error_3)];
                                    case 6:
                                        _a.sent();
                                        _a.label = 7;
                                    case 7: throw error_3;
                                    case 8: return [2 /*return*/];
                                }
                            });
                        }); };
                        return [2 /*return*/, doWork(this.transactionManager_)];
                    case 1:
                        temp_1 = this.manager_;
                        doWork_1 = function (m) { return __awaiter(_this, void 0, void 0, function () {
                            var result, error_4;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.manager_ = m;
                                        this.transactionManager_ = m;
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, work(m)];
                                    case 2:
                                        result = _a.sent();
                                        this.manager_ = temp_1;
                                        this.transactionManager_ = undefined;
                                        return [2 /*return*/, result];
                                    case 3:
                                        error_4 = _a.sent();
                                        this.manager_ = temp_1;
                                        this.transactionManager_ = undefined;
                                        throw error_4;
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); };
                        if (!isolation) return [3 /*break*/, 9];
                        result = void 0;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 9]);
                        return [4 /*yield*/, this.manager_.transaction(isolation, function (m) { return doWork_1(m); })];
                    case 3:
                        result = _a.sent();
                        return [2 /*return*/, result];
                    case 4:
                        error_1 = _a.sent();
                        if (!this.shouldRetryTransaction(error_1)) return [3 /*break*/, 5];
                        return [2 /*return*/, this.manager_.transaction(isolation, function (m) { return doWork_1(m); })];
                    case 5:
                        if (!errorHandler) return [3 /*break*/, 7];
                        return [4 /*yield*/, errorHandler(error_1)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7: throw error_1;
                    case 8: return [3 /*break*/, 9];
                    case 9:
                        _a.trys.push([9, 11, , 14]);
                        return [4 /*yield*/, this.manager_.transaction(function (m) { return doWork_1(m); })];
                    case 10: return [2 /*return*/, _a.sent()];
                    case 11:
                        error_2 = _a.sent();
                        if (!errorHandler) return [3 /*break*/, 13];
                        return [4 /*yield*/, errorHandler(error_2)];
                    case 12:
                        result = _a.sent();
                        if (dontFail) {
                            return [2 /*return*/, result];
                        }
                        _a.label = 13;
                    case 13: throw error_2;
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Dedicated method to set metadata.
     * @param {string} obj - the entity to apply metadata to.
     * @param {object} metadata - the metadata to set
     * @return {Promise} resolves to the updated result.
     */
    BaseService.prototype.setMetadata_ = function (obj, metadata) {
        var e_1, _a;
        var existing = obj.metadata || {};
        var newData = {};
        try {
            for (var _b = __values(Object.entries(metadata)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
                if (typeof key !== "string") {
                    throw new medusa_core_utils_1.MedusaError(medusa_core_utils_1.MedusaError.Types.INVALID_ARGUMENT, "Key type is invalid. Metadata keys must be strings");
                }
                newData[key] = value;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var updated = __assign(__assign({}, existing), newData);
        return updated;
    };
    /**
     * Adds a decorator to a service. The decorator must be a function and should
     * return a decorated object.
     * @param {function} fn - the decorator to add to the service
     */
    BaseService.prototype.addDecorator = function (fn) {
        if (typeof fn !== "function") {
            throw Error("Decorators must be of type function");
        }
        this.decorators_.push(fn);
    };
    /**
     * Runs the decorators registered on the service. The decorators are run in
     * the order they have been registered in. Failing decorators will be skipped
     * in order to ensure deliverability in spite of breaking code.
     * @param {object} obj - the object to decorate.
     * @return {object} the decorated object.
     */
    BaseService.prototype.runDecorators_ = function (obj, fields, expandFields) {
        var _this = this;
        if (fields === void 0) { fields = []; }
        if (expandFields === void 0) { expandFields = []; }
        return this.decorators_.reduce(function (acc, next) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, acc.then(function (res) { return next(res, fields, expandFields); }).catch(function () { return acc; })];
            });
        }); }, Promise.resolve(obj));
    };
    return BaseService;
}());
exports.default = BaseService;
//# sourceMappingURL=base-service.js.map