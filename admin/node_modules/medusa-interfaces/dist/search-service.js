"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_service_1 = __importDefault(require("./base-service"));
/**
 * The interface that all search services must implement.
 * @interface
 */
var SearchService = /** @class */ (function (_super) {
    __extends(SearchService, _super);
    function SearchService() {
        return _super.call(this) || this;
    }
    Object.defineProperty(SearchService.prototype, "options", {
        get: function () {
            var _a;
            return (_a = this.options_) !== null && _a !== void 0 ? _a : {};
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Used to create an index
     * @param indexName {string} - the index name
     * @param [options] {string} - the index name
     * @return {Promise<{object}>} - returns response from search engine provider
     */
    SearchService.prototype.createIndex = function (indexName, options) {
        throw Error("createIndex must be overridden by a child class");
    };
    /**
     * Used to get an index
     * @param indexName {string} - the index name.
     * @return {Promise<{object}>} - returns response from search engine provider
     */
    SearchService.prototype.getIndex = function (indexName) {
        throw Error("getIndex must be overridden by a child class");
    };
    /**
     * Used to index documents by the search engine provider
     * @param indexName {string} - the index name
     * @param documents {Array.<Object>} - documents array to be indexed
     * @param type {string} - type of documents to be added (e.g: products, regions, orders, etc)
     * @return {Promise<{object}>} - returns response from search engine provider
     */
    SearchService.prototype.addDocuments = function (indexName, documents, type) {
        throw Error("addDocuments must be overridden by a child class");
    };
    /**
     * Used to replace documents
     * @param indexName {string} - the index name.
     * @param documents {Object} - array of document objects that will replace existing documents
     * @param type {Array.<Object>} - type of documents to be replaced (e.g: products, regions, orders, etc)
     * @return {Promise<{object}>} - returns response from search engine provider
     */
    SearchService.prototype.replaceDocuments = function (indexName, documents, type) {
        throw Error("updateDocument must be overridden by a child class");
    };
    /**
     * Used to delete document
     * @param indexName {string} - the index name
     * @param document_id {string} - the id of the document
     * @return {Promise<{object}>} - returns response from search engine provider
     */
    SearchService.prototype.deleteDocument = function (indexName, document_id) {
        throw Error("deleteDocument must be overridden by a child class");
    };
    /**
     * Used to delete all documents
     * @param indexName {string} - the index name
     * @return {Promise<{object}>} - returns response from search engine provider
     */
    SearchService.prototype.deleteAllDocuments = function (indexName) {
        throw Error("deleteAllDocuments must be overridden by a child class");
    };
    /**
     * Used to search for a document in an index
     * @param indexName {string} - the index name
     * @param query {string} - the search query
     * @param options {{ paginationOptions: { limit: number, offset: number }, filter: any, additionalOptions: any}}
     * - any options passed to the request object other than the query and indexName
     * - additionalOptions contain any provider specific options
     * @return {Promise<{ hits: any[]; [k: string]: any; }>} returns response from search engine provider
     */
    SearchService.prototype.search = function (indexName, query, options) {
        throw Error("search must be overridden by a child class");
    };
    /**
     * Used to update the settings of an index
     * @param indexName {string} - the index name
     * @param settings {object} - settings object
     * @return {Promise<{object}>} - returns response from search engine provider
     */
    SearchService.prototype.updateSettings = function (indexName, settings) {
        throw Error("updateSettings must be overridden by a child class");
    };
    return SearchService;
}(base_service_1.default));
exports.default = SearchService;
//# sourceMappingURL=search-service.js.map