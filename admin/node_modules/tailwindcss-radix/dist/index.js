"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const plugin_1 = __importDefault(require("tailwindcss/plugin"));
const dataAttributes = ["disabled"];
const namedDataAttributes = {
    state: [
        "open",
        "closed",
        "active",
        "inactive",
        "on",
        "off",
        "checked",
        "unchecked",
        "instant-open",
        "delayed-open",
    ],
    side: ["top", "bottom", "left", "right"],
    orientation: ["horizontal", "vertical"],
};
module.exports = plugin_1.default.withOptions((options) => ({ addUtilities, addVariant, e }) => {
    options = options
        ? options
        : {
            variantPrefix: "radix",
            skipAttributeNames: false,
        };
    if ((options === null || options === void 0 ? void 0 : options.variantPrefix) === "" && (options === null || options === void 0 ? void 0 : options.skipAttributeNames) === true) {
        throw new Error("tailwindcss-radix: Cannot use empty `variantPrefix` while `skipAttributeNames` is enabled");
    }
    const variantPrefix = options.variantPrefix === "" ? "" : `${options.variantPrefix}-`;
    const transformOrigins = [
        "dropdown-menu",
        "hover-card",
        "context-menu",
        "popover",
        "tooltip",
    ];
    transformOrigins.forEach((transformOrigin) => {
        addUtilities({
            [`.origin-${variantPrefix}${transformOrigin}`]: {
                "transform-origin": `var(--radix-${transformOrigin}-content-transform-origin)`,
            },
        });
    });
    dataAttributes.forEach((attributeValue) => {
        let variantName = `${variantPrefix}${attributeValue}`;
        let selector = `data-${attributeValue}`;
        addVariant(`${variantName}`, ({ modifySelectors, separator }) => {
            modifySelectors(({ className }) => {
                return `.${e(`${variantName}${separator}${className}`)}[${selector}]`;
            });
        });
        addVariant(`group-${variantName}`, ({ modifySelectors, separator }) => {
            modifySelectors(({ className }) => {
                return `.group[${selector}] .${e(`group-${variantName}${separator}${className}`)}`;
            });
        });
    });
    Object.keys(namedDataAttributes).forEach((attributeName) => {
        namedDataAttributes[attributeName].forEach((attributeValue) => {
            let variantName = options.skipAttributeNames
                ? `${variantPrefix}${attributeValue}`
                : `${variantPrefix}${attributeName}-${attributeValue}`;
            let selector = `data-${attributeName}="${attributeValue}"`;
            addVariant(`${variantName}`, ({ modifySelectors, separator }) => {
                modifySelectors(({ className }) => {
                    return `.${e(`${variantName}${separator}${className}`)}[${selector}]`;
                });
            });
            addVariant(`group-${variantName}`, ({ modifySelectors, separator }) => {
                modifySelectors(({ className }) => {
                    return `.group[${selector}] .${e(`group-${variantName}${separator}${className}`)}`;
                });
            });
        });
    });
    const componentContentHeights = ["accordion", "collapsible"];
    componentContentHeights.forEach((component) => {
        addUtilities({
            [`.h-${variantPrefix}${component}`]: {
                height: `var(--radix-${component}-content-height)`,
            },
        });
    });
    const componentContentWidths = ["accordion", "collapsible"];
    componentContentWidths.forEach((component) => {
        addUtilities({
            [`.w-${variantPrefix}${component}`]: {
                width: `var(--radix-${component}-content-width)`,
            },
        });
    });
});
