{"mappings":"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","sources":["./node_modules/@parcel/scope-hoisting/lib/helpers.js","./packages/react/select/src/Select.tsx"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$defineInteropFlag(a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n}\n\nfunction $parcel$reexport(e, n, v) {\n  Object.defineProperty(e, n, {get: v, enumerable: true});\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function(key) {\n    if (key === 'default' || key === '__esModule') {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n}\n\nfunction $parcel$missingModule(name) {\n  var err = new Error(\"Cannot find module '\" + name + \"'\");\n  err.code = 'MODULE_NOT_FOUND';\n  throw err;\n}\n\nvar $parcel$global =\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof self !== 'undefined'\n    ? self\n    : typeof window !== 'undefined'\n    ? window\n    : typeof global !== 'undefined'\n    ? global\n    : {};\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport { useLabelContext } from '@radix-ui/react-label';\nimport { Portal } from '@radix-ui/react-portal';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst OPEN_KEYS = [' ', 'Enter', 'ArrowUp', 'ArrowDown'];\nconst SELECTION_KEYS = [' ', 'Enter'];\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nconst SELECT_NAME = 'Select';\n\ntype ItemData = { value: string; disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  SelectItemElement,\n  ItemData\n>(SELECT_NAME);\n\ntype ScopedProps<P> = P & { __scopeSelect?: Scope };\nconst [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n  createCollectionScope,\n]);\n\ntype SelectContextValue = {\n  trigger: SelectTriggerElement | null;\n  onTriggerChange(node: SelectTriggerElement | null): void;\n  valueNode: SelectValueElement | null;\n  onValueNodeChange(node: SelectValueElement): void;\n  valueNodeHasChildren: boolean;\n  onValueNodeHasChildrenChange(hasChildren: boolean): void;\n  contentId: string;\n  value: string;\n  onValueChange(value: string): void;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  dir: SelectProps['dir'];\n  bubbleSelect: HTMLSelectElement | null;\n  triggerPointerDownPosRef: React.MutableRefObject<{ x: number; y: number } | null>;\n};\n\nconst [SelectProvider, useSelectContext] = createSelectContext<SelectContextValue>(SELECT_NAME);\n\ninterface SelectProps {\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  name?: string;\n  autoComplete?: string;\n  children?: React.ReactNode;\n}\n\nconst Select: React.FC<SelectProps> = (props: ScopedProps<SelectProps>) => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n  } = props;\n  const [trigger, setTrigger] = React.useState<SelectTriggerElement | null>(null);\n  const [valueNode, setValueNode] = React.useState<SelectValueElement | null>(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n  const [value = '', setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n  // We set this to true by default so that events bubble to forms without JS (SSR)\n  const isFormControl = trigger ? Boolean(trigger.closest('form')) : true;\n  const [bubbleSelect, setBubbleSelect] = React.useState<HTMLSelectElement | null>(null);\n  const triggerPointerDownPosRef = React.useRef<{ x: number; y: number } | null>(null);\n\n  return (\n    <SelectProvider\n      scope={__scopeSelect}\n      trigger={trigger}\n      onTriggerChange={setTrigger}\n      valueNode={valueNode}\n      onValueNodeChange={setValueNode}\n      valueNodeHasChildren={valueNodeHasChildren}\n      onValueNodeHasChildrenChange={setValueNodeHasChildren}\n      contentId={useId()}\n      value={value}\n      onValueChange={setValue}\n      open={open}\n      onOpenChange={setOpen}\n      dir={dir}\n      bubbleSelect={bubbleSelect}\n      triggerPointerDownPosRef={triggerPointerDownPosRef}\n    >\n      <Collection.Provider scope={__scopeSelect}>{children}</Collection.Provider>\n      {isFormControl ? (\n        <BubbleSelect\n          ref={setBubbleSelect}\n          aria-hidden\n          tabIndex={-1}\n          name={name}\n          autoComplete={autoComplete}\n          value={value}\n          // enable form autofill\n          onChange={(event) => setValue(event.target.value)}\n        />\n      ) : null}\n    </SelectProvider>\n  );\n};\n\nSelect.displayName = SELECT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'SelectTrigger';\n\ntype SelectTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SelectTriggerProps extends PrimitiveButtonProps {}\n\nconst SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(\n  (props: ScopedProps<SelectTriggerProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      disabled = false,\n      'aria-labelledby': ariaLabelledby,\n      ...triggerProps\n    } = props;\n    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection(__scopeSelect);\n    const labelId = useLabelContext(context.trigger);\n    const labelledBy = ariaLabelledby || labelId;\n\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.value === context.value);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem !== undefined) {\n        context.onValueChange(nextItem.value);\n      }\n    });\n\n    const handleOpen = () => {\n      if (!disabled) {\n        context.onOpenChange(true);\n        // reset typeahead when we open\n        resetTypeahead();\n      }\n    };\n\n    return (\n      <Primitive.button\n        type=\"button\"\n        role=\"combobox\"\n        aria-controls={context.contentId}\n        aria-expanded={context.open}\n        aria-autocomplete=\"none\"\n        aria-labelledby={labelledBy}\n        dir={context.dir}\n        disabled={disabled}\n        data-disabled={disabled ? '' : undefined}\n        {...triggerProps}\n        ref={composedRefs}\n        onPointerDown={composeEventHandlers(triggerProps.onPointerDown, (event) => {\n          // prevent implicit pointer capture\n          // https://www.w3.org/TR/pointerevents3/#implicit-pointer-capture\n          (event.target as HTMLElement).releasePointerCapture(event.pointerId);\n\n          // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n          // but not when the control key is pressed (avoiding MacOS right click)\n          if (event.button === 0 && event.ctrlKey === false) {\n            handleOpen();\n            context.triggerPointerDownPosRef.current = {\n              x: Math.round(event.pageX),\n              y: Math.round(event.pageY),\n            };\n            // prevent trigger from stealing focus from the active item after opening.\n            event.preventDefault();\n          }\n        })}\n        onKeyDown={composeEventHandlers(triggerProps.onKeyDown, (event) => {\n          const isTypingAhead = searchRef.current !== '';\n          const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n          if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n          if (isTypingAhead && event.key === ' ') return;\n          if (OPEN_KEYS.includes(event.key)) {\n            handleOpen();\n            event.preventDefault();\n          }\n        })}\n      />\n    );\n  }\n);\n\nSelectTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectValue\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALUE_NAME = 'SelectValue';\n\ntype SelectValueElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SelectValueProps extends PrimitiveSpanProps {}\n\nconst SelectValue = React.forwardRef<SelectValueElement, SelectValueProps>(\n  (props: ScopedProps<SelectValueProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, ...valueProps } = props;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = props.children !== undefined;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n\n    React.useEffect(() => {\n      onValueNodeHasChildrenChange(hasChildren);\n    }, [onValueNodeHasChildrenChange, hasChildren]);\n\n    return (\n      <Primitive.span\n        {...valueProps}\n        ref={composedRefs}\n        // we don't want events from the portalled `SelectValue` children to bubble\n        // through the item they came from\n        style={{ pointerEvents: 'none' }}\n      />\n    );\n  }\n);\n\nSelectValue.displayName = VALUE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectIcon\n * -----------------------------------------------------------------------------------------------*/\n\nconst ICON_NAME = 'SelectIcon';\n\ntype SelectIconElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectIconProps extends PrimitiveSpanProps {}\n\nconst SelectIcon = React.forwardRef<SelectIconElement, SelectIconProps>(\n  (props: ScopedProps<SelectIconProps>, forwardedRef) => {\n    const { __scopeSelect, children, ...iconProps } = props;\n    return (\n      <Primitive.span aria-hidden {...iconProps} ref={forwardedRef}>\n        {children || '▼'}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectIcon.displayName = ICON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'SelectContent';\n\ntype SelectContentElement = SelectContentImplElement;\ninterface SelectContentProps extends SelectContentImplProps {}\n\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\n  (props: ScopedProps<SelectContentProps>, forwardedRef) => {\n    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n    const [fragment, setFragment] = React.useState<DocumentFragment>();\n\n    // setting the fragment in `useLayoutEffect` as `DocumentFragment` doesn't exist on the server\n    useLayoutEffect(() => {\n      setFragment(new DocumentFragment());\n    }, []);\n\n    return context.open ? (\n      <SelectContentImpl {...props} ref={forwardedRef} />\n    ) : fragment ? (\n      ReactDOM.createPortal(\n        // @ts-ignore: This is to avoid the \"SelectViewport must be inside \"SelectContent\" error\n        <SelectContentContextProvider scope={props.__scopeSelect}>\n          <Collection.Slot scope={props.__scopeSelect}>\n            <div>{props.children}</div>\n          </Collection.Slot>\n        </SelectContentContextProvider>,\n        fragment as any\n      )\n    ) : null;\n  }\n);\n\nconst CONTENT_MARGIN = 10;\n\ntype SelectContentContextValue = {\n  contentWrapper: HTMLDivElement | null;\n  content: SelectContentElement | null;\n  viewport: SelectViewportElement | null;\n  onViewportChange(node: SelectViewportElement | null): void;\n  selectedItem: SelectItemElement | null;\n  onSelectedItemChange(node: SelectItemElement | null): void;\n  selectedItemText: SelectItemTextElement | null;\n  onSelectedItemTextChange(node: SelectItemTextElement | null): void;\n  onScrollButtonChange(node: SelectScrollButtonImplElement | null): void;\n  onItemLeave(): void;\n  isPositioned: boolean;\n  shouldExpandOnScrollRef: React.RefObject<boolean>;\n  searchRef: React.RefObject<string>;\n};\n\nconst [SelectContentContextProvider, useSelectContentContext] =\n  createSelectContext<SelectContentContextValue>(CONTENT_NAME);\n\ntype SelectContentImplElement = React.ElementRef<typeof DismissableLayer>;\ntype DismissableLayerProps = Radix.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface SelectContentImplProps\n  extends Omit<\n    DismissableLayerProps,\n    'disableOutsidePointerEvents' | 'onFocusOutside' | 'onInteractOutside' | 'onDismiss'\n  > {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst SelectContentImpl = React.forwardRef<SelectContentImplElement, SelectContentImplProps>(\n  (props: ScopedProps<SelectContentImplProps>, forwardedRef) => {\n    const { __scopeSelect, onCloseAutoFocus, children, ...contentProps } = props;\n    const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n    const [contentWrapper, setContentWrapper] = React.useState<HTMLDivElement | null>(null);\n    const [content, setContent] = React.useState<SelectContentImplElement | null>(null);\n    const [viewport, setViewport] = React.useState<SelectViewportElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n    const [selectedItem, setSelectedItem] = React.useState<SelectItemElement | null>(null);\n    const [selectedItemText, setSelectedItemText] = React.useState<SelectItemTextElement | null>(\n      null\n    );\n    const getItems = useCollection(__scopeSelect);\n    const [isPositioned, setIsPositioned] = React.useState(false);\n    const shouldRepositionRef = React.useRef(true);\n    const shouldExpandOnScrollRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      if (content) return hideOthers(content);\n    }, [content]);\n\n    const focusFirst = React.useCallback(\n      (candidates: Array<HTMLElement | null>) => {\n        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);\n        const [lastItem] = restItems.slice(-1);\n\n        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n        for (const candidate of candidates) {\n          // if focus is already where we want to go, we don't want to keep going through the candidates\n          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n          candidate?.scrollIntoView({ block: 'nearest' });\n          // viewport might have padding so scroll to its edges when focusing first/last items.\n          if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n          candidate?.focus();\n          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n        }\n      },\n      [getItems, viewport]\n    );\n\n    const position = React.useCallback(() => {\n      if (\n        context.trigger &&\n        context.valueNode &&\n        contentWrapper &&\n        content &&\n        viewport &&\n        selectedItem &&\n        selectedItemText\n      ) {\n        const triggerRect = context.trigger.getBoundingClientRect();\n\n        // -----------------------------------------------------------------------------------------\n        //  Horizontal positioning\n        // -----------------------------------------------------------------------------------------\n        const contentRect = content.getBoundingClientRect();\n        const valueNodeRect = context.valueNode.getBoundingClientRect();\n        const itemTextRect = selectedItemText.getBoundingClientRect();\n\n        if (context.dir !== 'rtl') {\n          const itemTextOffset = itemTextRect.left - contentRect.left;\n          const left = valueNodeRect.left - itemTextOffset;\n          const leftDelta = triggerRect.left - left;\n          const minContentWidth = triggerRect.width + leftDelta;\n          const contentWidth = Math.max(minContentWidth, contentRect.width);\n          const rightEdge = window.innerWidth - CONTENT_MARGIN;\n          const clampedLeft = clamp(left, [CONTENT_MARGIN, rightEdge - contentWidth]);\n\n          contentWrapper.style.minWidth = minContentWidth + 'px';\n          contentWrapper.style.left = clampedLeft + 'px';\n        } else {\n          const itemTextOffset = contentRect.right - itemTextRect.right;\n          const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n          const rightDelta = window.innerWidth - triggerRect.right - right;\n          const minContentWidth = triggerRect.width + rightDelta;\n          const contentWidth = Math.max(minContentWidth, contentRect.width);\n          const leftEdge = window.innerWidth - CONTENT_MARGIN;\n          const clampedRight = clamp(right, [CONTENT_MARGIN, leftEdge - contentWidth]);\n\n          contentWrapper.style.minWidth = minContentWidth + 'px';\n          contentWrapper.style.right = clampedRight + 'px';\n        }\n\n        // -----------------------------------------------------------------------------------------\n        // Vertical positioning\n        // -----------------------------------------------------------------------------------------\n        const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n        const minContentHeight = selectedItem.offsetHeight * 5;\n        const itemsHeight = viewport.scrollHeight;\n\n        const contentStyles = window.getComputedStyle(content);\n        const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n        const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n        const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n        const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth; // prettier-ignore\n\n        const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n        const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n\n        const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n        const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n        const contentTopToItemMiddle = contentBorderTopWidth + itemOffsetMiddle;\n        const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n\n        const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n\n        if (willAlignWithoutTopOverflow) {\n          contentWrapper.style.bottom = 0 + 'px';\n          const viewportOffsetBottom =\n            content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n          const clampedTriggerMiddleToBottomEdge = Math.max(\n            triggerMiddleToBottomEdge,\n            selectedItemHalfHeight + viewportOffsetBottom + contentBorderBottomWidth\n          );\n          const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n          contentWrapper.style.height = height + 'px';\n        } else {\n          contentWrapper.style.top = 0 + 'px';\n          const clampedTopEdgeToTriggerMiddle = Math.max(\n            topEdgeToTriggerMiddle,\n            contentBorderTopWidth + viewport.offsetTop + selectedItemHalfHeight\n          );\n          const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n          contentWrapper.style.height = height + 'px';\n          viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n        }\n\n        contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n        contentWrapper.style.minHeight = minContentHeight + 'px';\n        contentWrapper.style.maxHeight = availableHeight + 'px';\n        // -----------------------------------------------------------------------------------------\n\n        setIsPositioned(true);\n\n        // we don't want the initial scroll position adjustment to trigger \"expand on scroll\"\n        // so we explicitly turn it on only after they've registered.\n        requestAnimationFrame(() => (shouldExpandOnScrollRef.current = true));\n      }\n    }, [\n      context.trigger,\n      context.valueNode,\n      contentWrapper,\n      content,\n      viewport,\n      selectedItem,\n      selectedItemText,\n      context.dir,\n    ]);\n\n    useLayoutEffect(() => position(), [position]);\n\n    const focusSelectedItem = React.useCallback(\n      () => focusFirst([selectedItem, content]),\n      [focusFirst, selectedItem, content]\n    );\n\n    // Since this is not dependent on layout, we want to ensure this runs at the same time as\n    // other effects across components. Hence why we don't call `focusSelectedItem` inside `position`.\n    React.useEffect(() => {\n      if (isPositioned) {\n        focusSelectedItem();\n      }\n    }, [isPositioned, focusSelectedItem]);\n\n    // When the viewport becomes scrollable at the top, the scroll up button will mount.\n    // Because it is part of the normal flow, it will push down the viewport, thus throwing our\n    // trigger => selectedItem alignment off by the amount the viewport was pushed down.\n    // We wait for this to happen and then re-run the positining logic one more time to account for it.\n    const handleScrollButtonChange = React.useCallback(\n      (node) => {\n        if (node && shouldRepositionRef.current === true) {\n          position();\n          focusSelectedItem();\n          shouldRepositionRef.current = false;\n        }\n      },\n      [position, focusSelectedItem]\n    );\n\n    // prevent selecting items on `pointerup` in some cases after opening from `pointerdown`\n    // and close on `pointerup` outside.\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    React.useEffect(() => {\n      if (content) {\n        let pointerMoveDelta = { x: 0, y: 0 };\n\n        const handlePointerMove = (event: PointerEvent) => {\n          pointerMoveDelta = {\n            x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n            y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0)),\n          };\n        };\n        const handlePointerUp = (event: PointerEvent) => {\n          // If the pointer hasn't moved by a certain threshold then we prevent selecting item on `pointerup`.\n          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n            event.preventDefault();\n          } else {\n            // otherwise, if the event was outside the content, close.\n            if (!content.contains(event.target as HTMLElement)) {\n              onOpenChange(false);\n            }\n          }\n          document.removeEventListener('pointermove', handlePointerMove);\n          triggerPointerDownPosRef.current = null;\n        };\n\n        if (triggerPointerDownPosRef.current !== null) {\n          document.addEventListener('pointermove', handlePointerMove);\n          document.addEventListener('pointerup', handlePointerUp, { capture: true, once: true });\n        }\n\n        return () => {\n          document.removeEventListener('pointermove', handlePointerMove);\n          document.removeEventListener('pointerup', handlePointerUp, { capture: true });\n        };\n      }\n    }, [content, onOpenChange, triggerPointerDownPosRef]);\n\n    React.useEffect(() => {\n      const close = () => onOpenChange(false);\n      window.addEventListener('blur', close);\n      window.addEventListener('resize', close);\n      return () => {\n        window.removeEventListener('blur', close);\n        window.removeEventListener('resize', close);\n      };\n    }, [onOpenChange]);\n\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (nextItem.ref.current as HTMLElement).focus());\n      }\n    });\n\n    const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n\n    return (\n      <Portal>\n        <RemoveScroll>\n          <div\n            ref={setContentWrapper}\n            style={{ display: 'flex', flexDirection: 'column', position: 'fixed', zIndex: 0 }}\n          >\n            <FocusScope\n              asChild\n              // we make sure we're not trapping once it's been closed\n              // (closed !== unmounted when animating out)\n              trapped={context.open}\n              onMountAutoFocus={(event) => {\n                // we prevent open autofocus because we manually focus the selected item\n                event.preventDefault();\n              }}\n              onUnmountAutoFocus={composeEventHandlers(onCloseAutoFocus, (event) => {\n                context.trigger?.focus({ preventScroll: true });\n                event.preventDefault();\n              })}\n            >\n              <DismissableLayer\n                role=\"listbox\"\n                id={context.contentId}\n                data-state={context.open ? 'open' : 'closed'}\n                dir={context.dir}\n                onContextMenu={(event) => event.preventDefault()}\n                {...contentProps}\n                ref={composedRefs}\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                  // When we get the height of the content, it includes borders. If we were to set\n                  // the height without having `boxSizing: 'border-box'` it would be too big.\n                  boxSizing: 'border-box',\n                  maxHeight: '100%',\n                  outline: 'none',\n                  ...contentProps.style,\n                }}\n                disableOutsidePointerEvents\n                // When focus is trapped, a focusout event may still happen.\n                // We make sure we don't trigger our `onDismiss` in such case.\n                onFocusOutside={(event) => event.preventDefault()}\n                onDismiss={() => context.onOpenChange(false)}\n                onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n                  // select should not be navigated using tab key so we prevent it\n                  if (event.key === 'Tab') event.preventDefault();\n\n                  if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n\n                  if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n                    const items = getItems().filter((item) => !item.disabled);\n                    let candidateNodes = items.map((item) => item.ref.current!);\n\n                    if (['ArrowUp', 'End'].includes(event.key)) {\n                      candidateNodes = candidateNodes.slice().reverse();\n                    }\n                    if (['ArrowUp', 'ArrowDown'].includes(event.key)) {\n                      const currentElement = event.target as SelectItemElement;\n                      const currentIndex = candidateNodes.indexOf(currentElement);\n                      candidateNodes = candidateNodes.slice(currentIndex + 1);\n                    }\n\n                    /**\n                     * Imperative focus during keydown is risky so we prevent React's batching updates\n                     * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n                     */\n                    setTimeout(() => focusFirst(candidateNodes));\n\n                    event.preventDefault();\n                  }\n                })}\n              >\n                <SelectContentContextProvider\n                  scope={__scopeSelect}\n                  contentWrapper={contentWrapper}\n                  content={content}\n                  viewport={viewport}\n                  onViewportChange={setViewport}\n                  selectedItem={selectedItem}\n                  onSelectedItemChange={setSelectedItem}\n                  selectedItemText={selectedItemText}\n                  onSelectedItemTextChange={setSelectedItemText}\n                  onScrollButtonChange={handleScrollButtonChange}\n                  onItemLeave={handleItemLeave}\n                  isPositioned={isPositioned}\n                  shouldExpandOnScrollRef={shouldExpandOnScrollRef}\n                  searchRef={searchRef}\n                >\n                  {children}\n                </SelectContentContextProvider>\n              </DismissableLayer>\n            </FocusScope>\n          </div>\n        </RemoveScroll>\n      </Portal>\n    );\n  }\n);\n\nSelectContentImpl.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectViewport\n * -----------------------------------------------------------------------------------------------*/\n\nconst VIEWPORT_NAME = 'SelectViewport';\n\ntype SelectViewportElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SelectViewportProps extends PrimitiveDivProps {}\n\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\n  (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\n    const { __scopeSelect, ...viewportProps } = props;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = React.useRef(0);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n        />\n        <Collection.Slot scope={__scopeSelect}>\n          <Primitive.div\n            data-radix-select-viewport=\"\"\n            role=\"presentation\"\n            {...viewportProps}\n            ref={composedRefs}\n            style={{\n              // we use position: 'relative' here on the `viewport` so that when we call\n              // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n              // (independent of the scrollUpButton).\n              position: 'relative',\n              flex: 1,\n              overflow: 'auto',\n              ...viewportProps.style,\n            }}\n            onScroll={composeEventHandlers(viewportProps.onScroll, (event) => {\n              const viewport = event.currentTarget;\n              const { contentWrapper, shouldExpandOnScrollRef } = contentContext;\n              if (shouldExpandOnScrollRef.current && contentWrapper) {\n                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n                if (scrolledBy > 0) {\n                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                  const cssHeight = parseFloat(contentWrapper.style.height);\n                  const prevHeight = Math.max(cssMinHeight, cssHeight);\n\n                  if (prevHeight < availableHeight) {\n                    const nextHeight = prevHeight + scrolledBy;\n                    const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                    const heightDiff = nextHeight - clampedNextHeight;\n\n                    contentWrapper.style.height = clampedNextHeight + 'px';\n                    if (contentWrapper.style.bottom === '0px') {\n                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                      // ensure the content stays pinned to the bottom\n                      contentWrapper.style.justifyContent = 'flex-end';\n                    }\n                  }\n                }\n              }\n              prevScrollTopRef.current = viewport.scrollTop;\n            })}\n          />\n        </Collection.Slot>\n      </>\n    );\n  }\n);\n\nSelectViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'SelectGroup';\n\ntype SelectGroupContextValue = { id: string };\n\nconst [SelectGroupContextProvider, useSelectGroupContext] =\n  createSelectContext<SelectGroupContextValue>(GROUP_NAME);\n\ntype SelectGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectGroupProps extends PrimitiveDivProps {}\n\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\n  (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\n    const { __scopeSelect, ...groupProps } = props;\n    const groupId = useId();\n    return (\n      <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\n        <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\n      </SelectGroupContextProvider>\n    );\n  }\n);\n\nSelectGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'SelectLabel';\n\ntype SelectLabelElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectLabelProps extends PrimitiveDivProps {}\n\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\n  (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\n    const { __scopeSelect, ...labelProps } = props;\n    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n    return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nSelectLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'SelectItem';\n\ntype SelectItemContextValue = {\n  value: string;\n  textId: string;\n  isSelected: boolean;\n  onItemTextChange(node: SelectItemTextElement | null): void;\n};\n\nconst [SelectItemContextProvider, useSelectItemContext] =\n  createSelectContext<SelectItemContextValue>(ITEM_NAME);\n\ntype SelectItemElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemProps extends PrimitiveDivProps {\n  value: string;\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\n  (props: ScopedProps<SelectItemProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      value,\n      disabled = false,\n      textValue: textValueProp,\n      ...itemProps\n    } = props;\n    const context = useSelectContext(ITEM_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n    const isSelected = context.value === value;\n    const [textValue, setTextValue] = React.useState(textValueProp ?? '');\n    const [isFocused, setIsFocused] = React.useState(false);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      isSelected ? contentContext.onSelectedItemChange : undefined\n    );\n    const textId = useId();\n\n    const handleSelect = () => {\n      if (!disabled) {\n        context.onValueChange(value);\n        context.onOpenChange(false);\n      }\n    };\n\n    return (\n      <SelectItemContextProvider\n        scope={__scopeSelect}\n        value={value}\n        textId={textId}\n        isSelected={isSelected}\n        onItemTextChange={React.useCallback((node) => {\n          setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? '').trim());\n        }, [])}\n      >\n        <Collection.ItemSlot\n          scope={__scopeSelect}\n          value={value}\n          disabled={disabled}\n          textValue={textValue}\n        >\n          <Primitive.div\n            role=\"option\"\n            aria-labelledby={textId}\n            // `isFocused` caveat fixes stuttering in VoiceOver\n            aria-selected={isSelected && isFocused}\n            data-state={isSelected ? 'active' : 'inactive'}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            tabIndex={disabled ? undefined : -1}\n            {...itemProps}\n            ref={composedRefs}\n            onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\n            onPointerUp={composeEventHandlers(itemProps.onPointerUp, handleSelect)}\n            onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\n              if (disabled) {\n                contentContext.onItemLeave();\n              } else {\n                // even though safari doesn't support this option, it's acceptable\n                // as it only means it might scroll a few pixels when using the pointer.\n                event.currentTarget.focus({ preventScroll: true });\n              }\n            })}\n            onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\n              if (event.currentTarget === document.activeElement) {\n                contentContext.onItemLeave();\n              }\n            })}\n            onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\n              const isTypingAhead = contentContext.searchRef.current !== '';\n              if (isTypingAhead && event.key === ' ') return;\n              if (SELECTION_KEYS.includes(event.key)) handleSelect();\n              // prevent page scroll if using the space key to select an item\n              if (event.key === ' ') event.preventDefault();\n            })}\n          />\n        </Collection.ItemSlot>\n      </SelectItemContextProvider>\n    );\n  }\n);\n\nSelectItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemText\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_TEXT_NAME = 'SelectItemText';\n\ntype SelectItemTextElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemTextProps extends PrimitiveSpanProps {}\n\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\n  (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, ...itemTextProps } = props;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const ref = React.useRef<SelectItemTextElement | null>(null);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      ref,\n      itemContext.onItemTextChange,\n      itemContext.isSelected ? contentContext.onSelectedItemTextChange : undefined\n    );\n\n    return (\n      <>\n        <Primitive.span id={itemContext.textId} {...itemTextProps} ref={composedRefs} />\n\n        {/* Portal the select item text into the trigger value node */}\n        {itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren\n          ? ReactDOM.createPortal(itemTextProps.children, context.valueNode)\n          : null}\n\n        {/* Portal an option in the bubble select */}\n        {context.bubbleSelect\n          ? ReactDOM.createPortal(\n              // we use `.textContent` because `option` only support `string` or `number`\n              <option value={itemContext.value}>{ref.current?.textContent}</option>,\n              context.bubbleSelect\n            )\n          : null}\n      </>\n    );\n  }\n);\n\nSelectItemText.displayName = ITEM_TEXT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'SelectItemIndicator';\n\ntype SelectItemIndicatorElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemIndicatorProps extends PrimitiveSpanProps {}\n\nconst SelectItemIndicator = React.forwardRef<SelectItemIndicatorElement, SelectItemIndicatorProps>(\n  (props: ScopedProps<SelectItemIndicatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...itemIndicatorProps } = props;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n    return itemContext.isSelected ? (\n      <Primitive.span aria-hidden {...itemIndicatorProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollUpButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_UP_BUTTON_NAME = 'SelectScrollUpButton';\n\ntype SelectScrollUpButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollUpButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollUpButton = React.forwardRef<\n  SelectScrollUpButtonElement,\n  SelectScrollUpButtonProps\n>((props: ScopedProps<SelectScrollUpButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, contentContext.onScrollButtonChange);\n\n  React.useEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const canScrollUp = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollUp ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollDownButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_DOWN_BUTTON_NAME = 'SelectScrollDownButton';\n\ntype SelectScrollDownButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollDownButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollDownButton = React.forwardRef<\n  SelectScrollDownButtonElement,\n  SelectScrollDownButtonProps\n>((props: ScopedProps<SelectScrollDownButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, contentContext.onScrollButtonChange);\n\n  React.useEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        // we use Math.ceil here because if the UI is zoomed-in\n        // `scrollTop` is not always reported as an integer\n        const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollDown ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\n\ntype SelectScrollButtonImplElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectScrollButtonImplProps extends PrimitiveDivProps {\n  onAutoScroll(): void;\n}\n\nconst SelectScrollButtonImpl = React.forwardRef<\n  SelectScrollButtonImplElement,\n  SelectScrollButtonImplProps\n>((props: ScopedProps<SelectScrollButtonImplProps>, forwardedRef) => {\n  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\n  const contentContext = useSelectContentContext('SelectScrollButton', __scopeSelect);\n  const autoScrollTimerRef = React.useRef<number | null>(null);\n  const getItems = useCollection(__scopeSelect);\n\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n\n  // When the viewport becomes scrollable on either side, the relevant scroll button will mount.\n  // Because it is part of the normal flow, it will push down (top button) or shrink (bottom button)\n  // the viewport, potentially causing the active item to now be partially out of view.\n  // We re-run the `scrollIntoView` logic to make sure it stays within the viewport.\n  useLayoutEffect(() => {\n    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({ block: 'nearest' });\n  }, [getItems]);\n\n  return (\n    <Primitive.div\n      aria-hidden\n      {...scrollIndicatorProps}\n      ref={forwardedRef}\n      style={{ flexShrink: 0, ...scrollIndicatorProps.style }}\n      onPointerMove={composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n        contentContext.onItemLeave();\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerLeave={composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n        clearAutoScrollTimer();\n      })}\n    />\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * SelectSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'SelectSeparator';\n\ntype SelectSeparatorElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectSeparatorProps extends PrimitiveDivProps {}\n\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\n  (props: ScopedProps<SelectSeparatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...separatorProps } = props;\n    return <Primitive.div aria-hidden {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nSelectSeparator.displayName = SEPARATOR_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst BubbleSelect = React.forwardRef<HTMLSelectElement, React.ComponentPropsWithoutRef<'select'>>(\n  (props, forwardedRef) => {\n    const { value, ...selectProps } = props;\n    const ref = React.useRef<HTMLSelectElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value);\n\n    // Bubble value change to parents (e.g form change event)\n    React.useEffect(() => {\n      const select = ref.current!;\n      const selectProto = window.HTMLSelectElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        selectProto,\n        'value'\n      ) as PropertyDescriptor;\n      const setValue = descriptor.set;\n      if (prevValue !== value && setValue) {\n        const event = new Event('change', { bubbles: true });\n        setValue.call(select, value);\n        select.dispatchEvent(event);\n      }\n    }, [prevValue, value]);\n\n    /**\n     * We purposefully use a `select` here to support form autofill as much\n     * as possible.\n     *\n     * We purposefully do not add the `value` attribute here to allow the value\n     * to be set programatically and bubble to any parent form `onChange` event.\n     * Adding the `value` will cause React to consider the programatic\n     * dispatch a duplicate and it will get swallowed.\n     *\n     * We use `VisuallyHidden` rather than `display: \"none\"` because Safari autofill\n     * won't work otherwise.\n     */\n    return (\n      <VisuallyHidden asChild>\n        <select {...selectProps} ref={composedRefs} defaultValue={value} />\n      </VisuallyHidden>\n    );\n  }\n);\n\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React.useRef('');\n  const timerRef = React.useRef(0);\n\n  const handleTypeaheadSearch = React.useCallback(\n    (key: string) => {\n      const search = searchRef.current + key;\n      handleSearchChange(search);\n\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        // Reset `searchRef` 1 second after it was last updated\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n    },\n    [handleSearchChange]\n  );\n\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = '';\n    window.clearTimeout(timerRef.current);\n  }, []);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n\n  return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\n * the search and the current item, and returns the next item (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through items starting with that character)\n *\n * We also reorder the items by wrapping the array around the current item.\n * This is so we always look forward from the current item, and picking the first\n * item will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current item from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current item still matches.\n */\nfunction findNextItem<T extends { textValue: string }>(\n  items: T[],\n  search: string,\n  currentItem?: T\n) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\n  const nextItem = wrappedItems.find((item) =>\n    item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextItem !== currentItem ? nextItem : undefined;\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Select;\nconst Trigger = SelectTrigger;\nconst Value = SelectValue;\nconst Icon = SelectIcon;\nconst Content = SelectContent;\nconst Viewport = SelectViewport;\nconst Group = SelectGroup;\nconst Label = SelectLabel;\nconst Item = SelectItem;\nconst ItemText = SelectItemText;\nconst ItemIndicator = SelectItemIndicator;\nconst ScrollUpButton = SelectScrollUpButton;\nconst ScrollDownButton = SelectScrollDownButton;\nconst Separator = SelectSeparator;\n\nexport {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n};\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n};\n"],"names":["a","__esModule","default","$parcel$exportWildcard","dest","source","Object","keys","forEach","key","defineProperty","enumerable","get","OPEN_KEYS","SELECTION_KEYS","Collection","useCollection","createCollectionScope","createCollection","createSelectContext","createSelectScope","createContextScope","SelectProvider","useSelectContext","Select","props","__scopeSelect","children","open","openProp","defaultOpen","onOpenChange","value","valueProp","defaultValue","onValueChange","dir","name","autoComplete","trigger","setTrigger","React","useState","valueNode","setValueNode","valueNodeHasChildren","setValueNodeHasChildren","setOpen","useControllableState","prop","defaultProp","onChange","setValue","isFormControl","Boolean","closest","bubbleSelect","setBubbleSelect","triggerPointerDownPosRef","useRef","_react","createElement","$bf6bc9e1fdce8ef6ed71e3a5c18d01$var$SelectProvider","scope","onTriggerChange","onValueNodeChange","onValueNodeHasChildrenChange","contentId","useId","$bf6bc9e1fdce8ef6ed71e3a5c18d01$var$Collection","Provider","$bf6bc9e1fdce8ef6ed71e3a5c18d01$var$BubbleSelect","ref","tabIndex","event","target","SelectTrigger","forwardRef","forwardedRef","disabled","ariaLabelledby","triggerProps","context","composedRefs","useComposedRefs","getItems","labelId","useLabelContext","labelledBy","searchRef","handleTypeaheadSearch","resetTypeahead","useTypeaheadSearch","search","enabledItems","filter","item","currentItem","find","nextItem","findNextItem","undefined","handleOpen","Primitive","button","_babelRuntimeHelpersExtends","type","role","onPointerDown","composeEventHandlers","releasePointerCapture","pointerId","ctrlKey","current","x","Math","round","pageX","y","pageY","preventDefault","onKeyDown","isTypingAhead","altKey","metaKey","length","includes","SelectValue","className","style","valueProps","hasChildren","useEffect","span","pointerEvents","SelectIcon","iconProps","SelectContent","fragment","setFragment","useLayoutEffect","DocumentFragment","$bf6bc9e1fdce8ef6ed71e3a5c18d01$var$SelectContentImpl","ReactDOM","createPortal","$bf6bc9e1fdce8ef6ed71e3a5c18d01$var$SelectContentContextProvider","Slot","SelectContentContextProvider","useSelectContentContext","SelectContentImpl","onCloseAutoFocus","contentProps","contentWrapper","setContentWrapper","content","setContent","viewport","setViewport","node","selectedItem","setSelectedItem","selectedItemText","setSelectedItemText","isPositioned","setIsPositioned","shouldRepositionRef","shouldExpandOnScrollRef","hideOthers","focusFirst","useCallback","candidates","firstItem","restItems","map","lastItem","slice","PREVIOUSLY_FOCUSED_ELEMENT","document","activeElement","candidate","scrollIntoView","block","scrollTop","scrollHeight","focus","position","triggerRect","getBoundingClientRect","contentRect","valueNodeRect","itemTextRect","itemTextOffset","left","leftDelta","minContentWidth","width","contentWidth","max","rightEdge","window","innerWidth","clampedLeft","clamp","minWidth","right","rightDelta","leftEdge","clampedRight","availableHeight","innerHeight","CONTENT_MARGIN","minContentHeight","offsetHeight","itemsHeight","contentStyles","getComputedStyle","contentBorderTopWidth","parseInt","borderTopWidth","contentPaddingTop","paddingTop","contentBorderBottomWidth","borderBottomWidth","fullContentHeight","paddingBottom","topEdgeToTriggerMiddle","top","height","triggerMiddleToBottomEdge","selectedItemHalfHeight","contentTopToItemMiddle","offsetTop","itemMiddleToContentBottom","bottom","viewportOffsetBottom","clientHeight","margin","minHeight","maxHeight","requestAnimationFrame","focusSelectedItem","handleScrollButtonChange","pointerMoveDelta","handlePointerMove","_triggerPointerDownPo","_triggerPointerDownPo2","_triggerPointerDownPo3","_triggerPointerDownPo4","abs","handlePointerUp","contains","removeEventListener","addEventListener","capture","once","close","setTimeout","handleItemLeave","Portal","RemoveScroll","display","flexDirection","zIndex","FocusScope","asChild","trapped","onMountAutoFocus","onUnmountAutoFocus","_context$trigger","preventScroll","DismissableLayer","id","onContextMenu","boxSizing","outline","disableOutsidePointerEvents","onFocusOutside","onDismiss","isModifierKey","candidateNodes","reverse","currentElement","currentIndex","indexOf","onViewportChange","onSelectedItemChange","onSelectedItemTextChange","onScrollButtonChange","onItemLeave","SelectViewport","viewportProps","contentContext","prevScrollTopRef","Fragment","dangerouslySetInnerHTML","__html","div","flex","overflow","onScroll","currentTarget","scrolledBy","cssMinHeight","parseFloat","cssHeight","prevHeight","nextHeight","clampedNextHeight","min","heightDiff","justifyContent","SelectGroupContextProvider","useSelectGroupContext","SelectGroup","groupProps","groupId","$bf6bc9e1fdce8ef6ed71e3a5c18d01$var$SelectGroupContextProvider","SelectLabel","labelProps","groupContext","SelectItemContextProvider","useSelectItemContext","SelectItem","textValue","textValueProp","itemProps","isSelected","setTextValue","isFocused","setIsFocused","textId","handleSelect","$bf6bc9e1fdce8ef6ed71e3a5c18d01$var$SelectItemContextProvider","onItemTextChange","prevTextValue","_node$textContent","textContent","trim","ItemSlot","onFocus","onBlur","onPointerUp","onPointerMove","onPointerLeave","SelectItemText","_ref$current","itemTextProps","itemContext","SelectItemIndicator","itemIndicatorProps","SelectScrollUpButton","canScrollUp","setCanScrollUp","handleScroll","$bf6bc9e1fdce8ef6ed71e3a5c18d01$var$SelectScrollButtonImpl","onAutoScroll","SelectScrollDownButton","canScrollDown","setCanScrollDown","maxScroll","ceil","SelectScrollButtonImpl","scrollIndicatorProps","autoScrollTimerRef","clearAutoScrollTimer","clearInterval","_activeItem$ref$curre","activeItem","flexShrink","setInterval","SelectSeparator","separatorProps","BubbleSelect","selectProps","prevValue","usePrevious","select","selectProto","HTMLSelectElement","prototype","getOwnPropertyDescriptor","set","Event","bubbles","call","dispatchEvent","VisuallyHidden","onSearchChange","handleSearchChange","useCallbackRef","timerRef","updateSearch","clearTimeout","items","normalizedSearch","Array","from","every","char","currentItemIndex","wrappedItems","array","startIndex","_","index","v","toLowerCase","startsWith","Root","Trigger","Value","Icon","Content","Viewport","Group","Label","Item","ItemText","ItemIndicator","ScrollUpButton","ScrollDownButton","Separator"],"version":3,"file":"index.js.map"}