import { AdminOrdersRes, AdminPostOrdersOrderSwapsReq, AdminPostOrdersOrderSwapsSwapFulfillmentsReq, AdminPostOrdersOrderSwapsSwapShipmentsReq } from "@medusajs/medusa";
import { Response } from "@medusajs/medusa-js";
import { UseMutationOptions } from "react-query";
export declare const useAdminCreateSwap: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsReq>) => import("react-query").UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsReq, unknown>;
export declare const useAdminCancelSwap: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>) => import("react-query").UseMutationResult<Response<AdminOrdersRes>, Error, string, unknown>;
export declare const useAdminFulfillSwap: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsSwapFulfillmentsReq & {
    swap_id: string;
}>) => import("react-query").UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsSwapFulfillmentsReq & {
    swap_id: string;
}, unknown>;
export declare const useAdminCreateSwapShipment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsSwapShipmentsReq & {
    swap_id: string;
}>) => import("react-query").UseMutationResult<Response<AdminOrdersRes>, Error, AdminPostOrdersOrderSwapsSwapShipmentsReq & {
    swap_id: string;
}, unknown>;
export declare const useAdminProcessSwapPayment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>) => import("react-query").UseMutationResult<Response<AdminOrdersRes>, Error, string, unknown>;
export declare const useAdminCancelSwapFulfillment: (orderId: string, options?: UseMutationOptions<Response<AdminOrdersRes>, Error, {
    swap_id: string;
    fulfillment_id: string;
}>) => import("react-query").UseMutationResult<Response<AdminOrdersRes>, Error, {
    swap_id: string;
    fulfillment_id: string;
}, unknown>;
