import * as React from 'react';
import React__default, { useEffect, useContext, useState } from 'react';
import { QueryClientProvider, useQuery, useMutation, useQueryClient } from 'react-query';
import Medusa from '@medusajs/medusa-js';
import { isEmpty, isObject, isArray } from 'lodash-es';

function _regeneratorRuntime() {
  /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

  _regeneratorRuntime = function () {
    return exports;
  };

  var exports = {},
      Op = Object.prototype,
      hasOwn = Op.hasOwnProperty,
      $Symbol = "function" == typeof Symbol ? Symbol : {},
      iteratorSymbol = $Symbol.iterator || "@@iterator",
      asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
      toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }

  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
        generator = Object.create(protoGenerator.prototype),
        context = new Context(tryLocsList || []);
    return generator._invoke = function (innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");

        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }

        for (context.method = method, context.arg = arg;;) {
          var delegate = context.delegate;

          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);

            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }

          if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw state = "completed", context.arg;
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);

          if ("normal" === record.type) {
            if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }

          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }(innerFn, self, context), generator;
  }

  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }

  exports.wrap = wrap;
  var ContinueSentinel = {};

  function Generator() {}

  function GeneratorFunction() {}

  function GeneratorFunctionPrototype() {}

  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
      NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);

      if ("throw" !== record.type) {
        var result = record.arg,
            value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }

      reject(record.arg);
    }

    var previousPromise;

    this._invoke = function (method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    };
  }

  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];

    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }

  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

          return next.value = undefined, next.done = !0, next;
        };

        return next.next = next;
      }
    }

    return {
      next: doneResult
    };
  }

  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }

  return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (object) {
    var keys = [];

    for (var key in object) keys.push(key);

    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }

      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;

      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
            record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
              hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];

        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;

          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }

          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var MedusaContext = /*#__PURE__*/React__default.createContext(null);
var useMedusa = function useMedusa() {
  var context = React__default.useContext(MedusaContext);

  if (!context) {
    throw new Error("useMedusa must be used within a MedusaProvider");
  }

  return context;
};
var MedusaProvider = function MedusaProvider(_ref) {
  var queryClientProviderProps = _ref.queryClientProviderProps,
      baseUrl = _ref.baseUrl,
      apiKey = _ref.apiKey,
      children = _ref.children;
  var medusaClient = new Medusa({
    baseUrl: baseUrl,
    maxRetries: 0,
    apiKey: apiKey
  });
  return React__default.createElement(QueryClientProvider, _extends({}, queryClientProviderProps), React__default.createElement(MedusaContext.Provider, {
    value: {
      client: medusaClient
    }
  }, children));
};

var queryKeysFactory = function queryKeysFactory(globalKey) {
  var queryKeyFactory = {
    all: [globalKey],
    lists: function lists() {
      return [].concat(queryKeyFactory.all, ["list"]);
    },
    list: function list(query) {
      return [].concat(queryKeyFactory.lists(), [{
        query: query
      }]);
    },
    details: function details() {
      return [].concat(queryKeyFactory.all, ["detail"]);
    },
    detail: function detail(id) {
      return [].concat(queryKeyFactory.details(), [id]);
    }
  };
  return queryKeyFactory;
};

var useLocalStorage = function useLocalStorage(key, initialState) {
  var _React$useState = React.useState(function () {
    try {
      var _item = typeof window !== "undefined" && window.localStorage.getItem(key);

      return _item || initialState;
    } catch (err) {
      return initialState;
    }
  }),
      item = _React$useState[0],
      setItem = _React$useState[1];

  var save = function save(data) {
    setItem(data);

    if (typeof window !== "undefined") {
      window.localStorage.setItem(key, data);
    }
  };

  var remove = function remove() {
    if (typeof window !== "undefined") {
      window.localStorage.removeItem(key);
    }
  };

  return [item, save, remove];
};

var _excluded$H = ["variant", "region", "includeTaxes"],
    _excluded2$u = ["amount", "region", "includeTaxes"];
/**
 * Takes a product variant and a region, and converts the variant's price to a localized decimal format
 */

var formatVariantPrice = function formatVariantPrice(_ref) {
  var variant = _ref.variant,
      region = _ref.region,
      _ref$includeTaxes = _ref.includeTaxes,
      includeTaxes = _ref$includeTaxes === void 0 ? true : _ref$includeTaxes,
      rest = _objectWithoutPropertiesLoose(_ref, _excluded$H);

  var amount = computeVariantPrice({
    variant: variant,
    region: region,
    includeTaxes: includeTaxes
  });
  return convertToLocale(_extends({
    amount: amount,
    currency_code: region == null ? void 0 : region.currency_code
  }, rest));
};
/**
 * Takes a product variant and region, and returns the variant price as a decimal number
 * @param params.variant - product variant
 * @param params.region - region
 * @param params.includeTaxes - whether to include taxes or not
 */

var computeVariantPrice = function computeVariantPrice(_ref2) {
  var variant = _ref2.variant,
      region = _ref2.region,
      _ref2$includeTaxes = _ref2.includeTaxes,
      includeTaxes = _ref2$includeTaxes === void 0 ? true : _ref2$includeTaxes;
  var amount = getVariantPrice(variant, region);
  return computeAmount({
    amount: amount,
    region: region,
    includeTaxes: includeTaxes
  });
};
/**
 * Finds the price amount correspoding to the region selected
 * @param variant - the product variant
 * @param region - the region
 * @returns - the price's amount
 */

var getVariantPrice = function getVariantPrice(variant, region) {
  var _variant$prices;

  var price = variant == null ? void 0 : (_variant$prices = variant.prices) == null ? void 0 : _variant$prices.find(function (p) {
    var _region$currency_code;

    return p.currency_code.toLowerCase() === (region == null ? void 0 : (_region$currency_code = region.currency_code) == null ? void 0 : _region$currency_code.toLowerCase());
  });
  return (price == null ? void 0 : price.amount) || 0;
};
/**
 * Takes an amount, a region, and returns the amount as a decimal including or excluding taxes
 */

var computeAmount = function computeAmount(_ref3) {
  var amount = _ref3.amount,
      region = _ref3.region,
      _ref3$includeTaxes = _ref3.includeTaxes,
      includeTaxes = _ref3$includeTaxes === void 0 ? true : _ref3$includeTaxes;
  var toDecimal = convertToDecimal(amount, region);
  var taxRate = includeTaxes ? getTaxRate(region) : 0;
  var amountWithTaxes = toDecimal * (1 + taxRate);
  return amountWithTaxes;
};
/**
 * Takes an amount and a region, and converts the amount to a localized decimal format
 */

var formatAmount = function formatAmount(_ref4) {
  var amount = _ref4.amount,
      region = _ref4.region,
      _ref4$includeTaxes = _ref4.includeTaxes,
      includeTaxes = _ref4$includeTaxes === void 0 ? true : _ref4$includeTaxes,
      rest = _objectWithoutPropertiesLoose(_ref4, _excluded2$u);

  var taxAwareAmount = computeAmount({
    amount: amount,
    region: region,
    includeTaxes: includeTaxes
  });
  return convertToLocale(_extends({
    amount: taxAwareAmount,
    currency_code: region.currency_code
  }, rest));
}; // we should probably add a more extensive list

var noDivisionCurrencies = ["krw", "jpy", "vnd"];

var convertToDecimal = function convertToDecimal(amount, region) {
  var _region$currency_code2;

  var divisor = noDivisionCurrencies.includes(region == null ? void 0 : (_region$currency_code2 = region.currency_code) == null ? void 0 : _region$currency_code2.toLowerCase()) ? 1 : 100;
  return Math.floor(amount) / divisor;
};

var getTaxRate = function getTaxRate(region) {
  return region && !isEmpty(region) ? (region == null ? void 0 : region.tax_rate) / 100 : 0;
};

var convertToLocale = function convertToLocale(_ref5) {
  var amount = _ref5.amount,
      currency_code = _ref5.currency_code,
      minimumFractionDigits = _ref5.minimumFractionDigits,
      maximumFractionDigits = _ref5.maximumFractionDigits,
      _ref5$locale = _ref5.locale,
      locale = _ref5$locale === void 0 ? "en-US" : _ref5$locale;
  return currency_code && !isEmpty(currency_code) ? new Intl.NumberFormat(locale, {
    style: "currency",
    currency: currency_code,
    minimumFractionDigits: minimumFractionDigits,
    maximumFractionDigits: maximumFractionDigits
  }).format(amount) : amount.toString();
};

var SessionCartContext = /*#__PURE__*/React__default.createContext(null);
var ACTION_TYPES;

(function (ACTION_TYPES) {
  ACTION_TYPES[ACTION_TYPES["INIT"] = 0] = "INIT";
  ACTION_TYPES[ACTION_TYPES["ADD_ITEM"] = 1] = "ADD_ITEM";
  ACTION_TYPES[ACTION_TYPES["SET_ITEMS"] = 2] = "SET_ITEMS";
  ACTION_TYPES[ACTION_TYPES["REMOVE_ITEM"] = 3] = "REMOVE_ITEM";
  ACTION_TYPES[ACTION_TYPES["UPDATE_ITEM"] = 4] = "UPDATE_ITEM";
  ACTION_TYPES[ACTION_TYPES["CLEAR_ITEMS"] = 5] = "CLEAR_ITEMS";
  ACTION_TYPES[ACTION_TYPES["SET_REGION"] = 6] = "SET_REGION";
})(ACTION_TYPES || (ACTION_TYPES = {}));

var reducer = function reducer(state, action) {
  switch (action.type) {
    case ACTION_TYPES.INIT:
      {
        return state;
      }

    case ACTION_TYPES.SET_REGION:
      {
        return generateCartState(_extends({}, state, {
          region: action.payload
        }), state.items);
      }

    case ACTION_TYPES.ADD_ITEM:
      {
        var duplicateVariantIndex = state.items.findIndex(function (item) {
          var _action$payload, _action$payload$varia;

          return item.variant.id === ((_action$payload = action.payload) == null ? void 0 : (_action$payload$varia = _action$payload.variant) == null ? void 0 : _action$payload$varia.id);
        });

        if (duplicateVariantIndex !== -1) {
          state.items.splice(duplicateVariantIndex, 1);
        }

        var items = [].concat(state.items, [action.payload]);
        return generateCartState(state, items);
      }

    case ACTION_TYPES.UPDATE_ITEM:
      {
        var _items = state.items.map(function (item) {
          return item.variant.id === action.payload.id ? _extends({}, item, action.payload.item) : item;
        });

        return generateCartState(state, _items);
      }

    case ACTION_TYPES.REMOVE_ITEM:
      {
        var _items2 = state.items.filter(function (item) {
          return item.variant.id !== action.payload.id;
        });

        return generateCartState(state, _items2);
      }

    case ACTION_TYPES.SET_ITEMS:
      {
        return generateCartState(state, action.payload);
      }

    case ACTION_TYPES.CLEAR_ITEMS:
      {
        return _extends({}, state, {
          items: [],
          total: 0,
          totalItems: 0
        });
      }

    default:
      return state;
  }
};

var generateCartState = function generateCartState(state, items) {
  var newItems = generateItems(state.region, items);
  return _extends({}, state, {
    items: newItems,
    totalItems: items.reduce(function (sum, item) {
      return sum + item.quantity;
    }, 0),
    total: calculateSessionCartTotal(newItems)
  });
};

var generateItems = function generateItems(region, items) {
  return items.map(function (item) {
    return _extends({}, item, {
      total: getVariantPrice(item.variant, region)
    });
  });
};

var calculateSessionCartTotal = function calculateSessionCartTotal(items) {
  return items.reduce(function (total, item) {
    return total + item.quantity * (item.total || 0);
  }, 0);
};

var defaultInitialState$1 = {
  region: {},
  items: [],
  total: 0,
  totalItems: 0
};
var SessionCartProvider = function SessionCartProvider(_ref) {
  var _ref$initialState = _ref.initialState,
      initialState = _ref$initialState === void 0 ? defaultInitialState$1 : _ref$initialState,
      children = _ref.children;

  var _useLocalStorage = useLocalStorage("medusa-session-cart", JSON.stringify(initialState)),
      saved = _useLocalStorage[0],
      save = _useLocalStorage[1];

  var _React$useReducer = React__default.useReducer(reducer, JSON.parse(saved)),
      state = _React$useReducer[0],
      dispatch = _React$useReducer[1];

  useEffect(function () {
    save(JSON.stringify(state));
  }, [state, save]);

  var setRegion = function setRegion(region) {
    if (!isObject(region) || isEmpty(region)) {
      throw new Error("region must be a non-empty object");
    }

    dispatch({
      type: ACTION_TYPES.SET_REGION,
      payload: region
    });
  };

  var getItem = function getItem(id) {
    return state.items.find(function (item) {
      return item.variant.id === id;
    });
  };

  var setItems = function setItems(items) {
    if (!isArray(items)) {
      throw new Error("items must be an array of items");
    }

    dispatch({
      type: ACTION_TYPES.SET_ITEMS,
      payload: items
    });
  };

  var addItem = function addItem(item) {
    if (!isObject(item) || isEmpty(item)) {
      throw new Error("item must be a non-empty object");
    }

    dispatch({
      type: ACTION_TYPES.ADD_ITEM,
      payload: item
    });
  };

  var updateItem = function updateItem(id, item) {
    dispatch({
      type: ACTION_TYPES.UPDATE_ITEM,
      payload: {
        id: id,
        item: item
      }
    });
  };

  var updateItemQuantity = function updateItemQuantity(id, quantity) {
    var item = getItem(id);
    if (!item) return;
    quantity = quantity <= 0 ? 1 : quantity;
    dispatch({
      type: ACTION_TYPES.UPDATE_ITEM,
      payload: {
        id: id,
        item: _extends({}, item, {
          quantity: Math.min(item.variant.inventory_quantity, quantity)
        })
      }
    });
  };

  var incrementItemQuantity = function incrementItemQuantity(id) {
    var item = getItem(id);
    if (!item) return;
    dispatch({
      type: ACTION_TYPES.UPDATE_ITEM,
      payload: {
        id: id,
        item: _extends({}, item, {
          quantity: Math.min(item.variant.inventory_quantity, item.quantity + 1)
        })
      }
    });
  };

  var decrementItemQuantity = function decrementItemQuantity(id) {
    var item = getItem(id);
    if (!item) return;
    dispatch({
      type: ACTION_TYPES.UPDATE_ITEM,
      payload: {
        id: id,
        item: _extends({}, item, {
          quantity: Math.max(0, item.quantity - 1)
        })
      }
    });
  };

  var removeItem = function removeItem(id) {
    dispatch({
      type: ACTION_TYPES.REMOVE_ITEM,
      payload: {
        id: id
      }
    });
  };

  var clearItems = function clearItems() {
    dispatch({
      type: ACTION_TYPES.CLEAR_ITEMS
    });
  };

  return React__default.createElement(SessionCartContext.Provider, {
    value: _extends({}, state, {
      setRegion: setRegion,
      addItem: addItem,
      updateItem: updateItem,
      updateItemQuantity: updateItemQuantity,
      incrementItemQuantity: incrementItemQuantity,
      decrementItemQuantity: decrementItemQuantity,
      removeItem: removeItem,
      getItem: getItem,
      setItems: setItems,
      clearItems: clearItems
    })
  }, children);
};
var useSessionCart = function useSessionCart() {
  var context = useContext(SessionCartContext);

  if (!context) {
    throw new Error("useSessionCart should be used as a child of SessionCartProvider");
  }

  return context;
};

var _excluded$G = ["data"],
    _excluded2$t = ["data"];
var PRODUCTS_QUERY_KEY = "products";
var productKeys = /*#__PURE__*/queryKeysFactory(PRODUCTS_QUERY_KEY);
var useProducts = function useProducts(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(productKeys.list(query), function () {
    return client.products.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$G);

  return _extends({}, data, rest);
};
var useProduct = function useProduct(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(productKeys.detail(id), function () {
    return client.products.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$t);

  return _extends({}, data, rest);
};

var _excluded$F = ["data"];
var CARTS_QUERY_KEY = "carts";
var cartKeys = /*#__PURE__*/queryKeysFactory(CARTS_QUERY_KEY);
var useGetCart = function useGetCart(id, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(cartKeys.detail(id), function () {
    return client.carts.retrieve(id);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$F);

  return _extends({}, data, rest);
};

var useCreateCart = function useCreateCart(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  return useMutation(function (data) {
    return client.carts.create(data);
  }, options);
};
var useUpdateCart = function useUpdateCart(cartId, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  return useMutation(function (data) {
    return client.carts.update(cartId, data);
  }, options);
};
var useCompleteCart = function useCompleteCart(cartId, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  return useMutation(function () {
    return client.carts.complete(cartId);
  }, options);
};
var useCreatePaymentSession = function useCreatePaymentSession(cartId, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  return useMutation(function () {
    return client.carts.createPaymentSessions(cartId);
  }, options);
};
var useUpdatePaymentSession = function useUpdatePaymentSession(cartId, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  return useMutation(function (_ref) {
    var data = _ref.data,
        provider_id = _ref.provider_id;
    return client.carts.updatePaymentSession(cartId, provider_id, {
      data: data
    });
  }, options);
};
var useRefreshPaymentSession = function useRefreshPaymentSession(cartId, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  return useMutation(function (_ref2) {
    var provider_id = _ref2.provider_id;
    return client.carts.refreshPaymentSession(cartId, provider_id);
  }, options);
};
var useSetPaymentSession = function useSetPaymentSession(cartId, options) {
  var _useMedusa7 = useMedusa(),
      client = _useMedusa7.client;

  return useMutation(function (data) {
    return client.carts.setPaymentSession(cartId, data);
  }, options);
};
var useAddShippingMethodToCart = function useAddShippingMethodToCart(cartId, options) {
  var _useMedusa8 = useMedusa(),
      client = _useMedusa8.client;

  return useMutation(function (data) {
    return client.carts.addShippingMethod(cartId, data);
  }, options);
};
var useDeletePaymentSession = function useDeletePaymentSession(cartId, options) {
  var _useMedusa9 = useMedusa(),
      client = _useMedusa9.client;

  return useMutation(function (_ref3) {
    var provider_id = _ref3.provider_id;
    return client.carts.deletePaymentSession(cartId, provider_id);
  }, options);
};
var useStartCheckout = function useStartCheckout(options) {
  var _useMedusa10 = useMedusa(),
      client = _useMedusa10.client;

  var mutation = useMutation( /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(data) {
      var _yield$client$carts$c, cart, res;

      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return client.carts.create(data);

            case 2:
              _yield$client$carts$c = _context.sent;
              cart = _yield$client$carts$c.cart;
              _context.next = 6;
              return client.carts.createPaymentSessions(cart.id);

            case 6:
              res = _context.sent;
              return _context.abrupt("return", res.cart);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref4.apply(this, arguments);
    };
  }(), options);
  return mutation;
};

var _excluded$E = ["data"],
    _excluded2$s = ["data"];
var SHIPPING_OPTION_QUERY_KEY = "shipping_options";

var shippingOptionKey = /*#__PURE__*/_extends({}, /*#__PURE__*/queryKeysFactory(SHIPPING_OPTION_QUERY_KEY), {
  cart: function cart(cartId) {
    return [].concat(shippingOptionKey.all, ["cart", cartId]);
  }
});

var useShippingOptions = function useShippingOptions(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(shippingOptionKey.list(query), /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", client.shippingOptions.list(query));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })), options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$E);

  return _extends({}, data, rest);
};
var useCartShippingOptions = function useCartShippingOptions(cartId, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(shippingOptionKey.cart(cartId), /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", client.shippingOptions.listCartOptions(cartId));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })), options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$s);

  return _extends({}, data, rest);
};

var _excluded$D = ["data"],
    _excluded2$r = ["data"];
var REGIONS_QUERY_KEY = "regions";
var regionsKey = /*#__PURE__*/queryKeysFactory(REGIONS_QUERY_KEY);
var useRegions = function useRegions(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(regionsKey.lists(), function () {
    return client.regions.list();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$D);

  return _extends({}, data, rest);
};
var useRegion = function useRegion(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(regionsKey.detail(id), function () {
    return client.regions.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$r);

  return _extends({}, data, rest);
};

var _excluded$C = ["data"],
    _excluded2$q = ["data"];
var RETURNS_REASONS_QUERY_KEY = "return_reasons";
var returnReasonsKey = /*#__PURE__*/queryKeysFactory(RETURNS_REASONS_QUERY_KEY);
var useReturnReasons = function useReturnReasons(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(returnReasonsKey.lists(), function () {
    return client.returnReasons.list();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$C);

  return _extends({}, data, rest);
};
var useReturnReason = function useReturnReason(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(returnReasonsKey.detail(id), function () {
    return client.returnReasons.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$q);

  return _extends({}, data, rest);
};

var _excluded$B = ["data"];
var SWAPS_QUERY_KEY = "swaps";

var swapKey = /*#__PURE__*/_extends({}, /*#__PURE__*/queryKeysFactory(SWAPS_QUERY_KEY), {
  cart: function cart(cartId) {
    return [].concat(swapKey.all, ["cart", cartId]);
  }
});

var useCartSwap = function useCartSwap(cartId, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(swapKey.cart(cartId), function () {
    return client.swaps.retrieveByCartId(cartId);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$B);

  return _extends({}, data, rest);
};

var useCreateSwap = function useCreateSwap(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  return useMutation(function (data) {
    return client.swaps.create(data);
  }, options);
};

var _excluded$A = ["data"],
    _excluded2$p = ["data"],
    _excluded3$7 = ["data"];
var ORDERS_QUERY_KEY = "orders";
var orderKeys = /*#__PURE__*/_extends({}, /*#__PURE__*/queryKeysFactory(ORDERS_QUERY_KEY), {
  cart: function cart(cartId) {
    return [].concat(orderKeys.details(), ["cart", cartId]);
  }
});
var useOrder = function useOrder(id, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(orderKeys.detail(id), function () {
    return client.orders.retrieve(id);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$A);

  return _extends({}, data, rest);
};
var useCartOrder = function useCartOrder(cartId, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(orderKeys.cart(cartId), function () {
    return client.orders.retrieveByCartId(cartId);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$p);

  return _extends({}, data, rest);
};
var useOrders = function useOrders(query, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var _useQuery3 = useQuery(orderKeys.list(query), function () {
    return client.orders.lookupOrder(query);
  }, options),
      data = _useQuery3.data,
      rest = _objectWithoutPropertiesLoose(_useQuery3, _excluded3$7);

  return _extends({}, data, rest);
};

var _excluded$z = ["data"],
    _excluded2$o = ["data"];
var CUSTOMERS_QUERY_KEY = "customers";
var customerKeys = /*#__PURE__*/_extends({}, /*#__PURE__*/queryKeysFactory(CUSTOMERS_QUERY_KEY), {
  orders: function orders(id) {
    return [].concat(customerKeys.detail(id), ["orders"]);
  }
});
var useMeCustomer = function useMeCustomer(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(customerKeys.detail("me"), function () {
    return client.customers.retrieve();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$z);

  return _extends({}, data, rest);
};
var useCustomerOrders = function useCustomerOrders(query, options) {
  if (query === void 0) {
    query = {
      limit: 10,
      offset: 0
    };
  }

  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(customerKeys.orders("me"), function () {
    return client.customers.listOrders(query);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$o);

  return _extends({}, data, rest);
};

var _excluded$y = ["id"];
var useCreateCustomer = function useCreateCustomer(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  return useMutation(function (data) {
    return client.customers.create(data);
  }, options);
};
var useUpdateMe = function useUpdateMe(options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  return useMutation(function (_ref) {
    var data = _objectWithoutPropertiesLoose(_ref, _excluded$y);

    return client.customers.update(data);
  }, options);
};

var useCreateReturn = function useCreateReturn(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  return useMutation(function (data) {
    return client.returns.create(data);
  }, options);
};

var _excluded$x = ["data"];
var GIFT_CARDS_QUERY_KEY = "gift_cards";
var giftCardKeys = /*#__PURE__*/queryKeysFactory(GIFT_CARDS_QUERY_KEY);
var useGiftCard = function useGiftCard(id, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(giftCardKeys.detail(id), function () {
    return client.giftCards.retrieve(id);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$x);

  return _extends({}, data, rest);
};

var _excluded$w = ["lineId"];
var useCreateLineItem = function useCreateLineItem(cartId, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  return useMutation(function (data) {
    return client.carts.lineItems.create(cartId, data);
  }, options);
};
var useUpdateLineItem = function useUpdateLineItem(cartId, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  return useMutation(function (_ref) {
    var lineId = _ref.lineId,
        data = _objectWithoutPropertiesLoose(_ref, _excluded$w);

    return client.carts.lineItems.update(cartId, lineId, data);
  }, options);
};
var useDeleteLineItem = function useDeleteLineItem(cartId, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  return useMutation(function (_ref2) {
    var lineId = _ref2.lineId;
    return client.carts.lineItems["delete"](cartId, lineId);
  }, options);
};

var _excluded$v = ["data"],
    _excluded2$n = ["data"];
var COLLECTIONS_QUERY_KEY = "collections";
var collectionKeys = /*#__PURE__*/queryKeysFactory(COLLECTIONS_QUERY_KEY);
var useCollection = function useCollection(id, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(collectionKeys.detail(id), function () {
    return client.collections.retrieve(id);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$v);

  return _extends({}, data, rest);
};
var useCollections = function useCollections(query, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(collectionKeys.list(query), function () {
    return client.collections.list(query);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$n);

  return _extends({}, data, rest);
};

var CartContext = /*#__PURE__*/React__default.createContext(null);
var useCart = function useCart() {
  var context = React__default.useContext(CartContext);

  if (!context) {
    throw new Error("useCart must be used within a CartProvider");
  }

  return context;
};
var defaultInitialState = {
  id: "",
  items: []
};
var CartProvider = function CartProvider(_ref) {
  var children = _ref.children,
      _ref$initialState = _ref.initialState,
      initialState = _ref$initialState === void 0 ? defaultInitialState : _ref$initialState;

  var _useState = useState(initialState),
      cart = _useState[0],
      setCart = _useState[1];

  var createCart = useCreateCart({
    onSuccess: function onSuccess(_ref2) {
      var cart = _ref2.cart;
      return setCart(cart);
    }
  });
  var updateCart = useUpdateCart(cart == null ? void 0 : cart.id, {
    onSuccess: function onSuccess(_ref3) {
      var cart = _ref3.cart;
      return setCart(cart);
    }
  });
  var addShippingMethod = useAddShippingMethodToCart(cart == null ? void 0 : cart.id, {
    onSuccess: function onSuccess(_ref4) {
      var cart = _ref4.cart;
      return setCart(cart);
    }
  });
  var startCheckout = useCreatePaymentSession(cart == null ? void 0 : cart.id, {
    onSuccess: function onSuccess(_ref5) {
      var cart = _ref5.cart;
      return setCart(cart);
    }
  });
  var pay = useSetPaymentSession(cart == null ? void 0 : cart.id, {
    onSuccess: function onSuccess(_ref6) {
      var cart = _ref6.cart;
      setCart(cart);
    }
  });
  var completeCheckout = useCompleteCart(cart == null ? void 0 : cart.id);
  var totalItems = cart == null ? void 0 : cart.items.map(function (i) {
    return i.quantity;
  }).reduce(function (acc, curr) {
    return acc + curr;
  }, 0);
  return React__default.createElement(CartContext.Provider, {
    value: {
      cart: cart,
      setCart: setCart,
      createCart: createCart,
      pay: pay,
      startCheckout: startCheckout,
      completeCheckout: completeCheckout,
      updateCart: updateCart,
      addShippingMethod: addShippingMethod,
      totalItems: totalItems || 0
    }
  }, children);
};

var _excluded$u = ["data"];
var ADMIN_AUTH_QUERY_KEY = "admin_auth";
var adminAuthKeys = /*#__PURE__*/queryKeysFactory(ADMIN_AUTH_QUERY_KEY);
var useAdminGetSession = function useAdminGetSession(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminAuthKeys.details(), function () {
    return client.admin.auth.getSession();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$u);

  return _extends({}, data, rest);
};

var buildOptions = function buildOptions(queryClient, queryKey, options) {
  return _extends({}, options, {
    onSuccess: function onSuccess() {
      if (options != null && options.onSuccess) {
        return options.onSuccess.apply(options, arguments);
      }

      if (queryKey !== undefined) {
        if (queryKey.filter(Array.isArray).length > 0) {
          queryKey.forEach(function (key) {
            return queryClient.invalidateQueries(key);
          });
        } else {
          queryClient.invalidateQueries(queryKey);
        }
      }
    }
  });
};

var useAdminLogin = function useAdminLogin(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.auth.createSession(payload);
  }, buildOptions(queryClient, adminAuthKeys.details(), options));
};
var useAdminDeleteSession = function useAdminDeleteSession(options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.auth.deleteSession();
  }, buildOptions(queryClient, adminAuthKeys.details(), options));
};

var _excluded$t = ["data"],
    _excluded2$m = ["data"];
var ADMIN_COLLECTIONS_QUERY_KEY$2 = "admin_batches";
var adminBatchJobsKeys = /*#__PURE__*/queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY$2);
var useAdminBatchJobs = function useAdminBatchJobs(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminBatchJobsKeys.list(query), function () {
    return client.admin.batchJobs.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$t);

  return _extends({}, data, rest);
};
var useAdminBatchJob = function useAdminBatchJob(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminBatchJobsKeys.detail(id), function () {
    return client.admin.batchJobs.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$m);

  return _extends({}, data, rest);
};

/**
 * Hook returns functions for creating batch jobs.
 *
 * @param options
 */

var useAdminCreateBatchJob = function useAdminCreateBatchJob(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.batchJobs.create(payload);
  }, buildOptions(queryClient, adminBatchJobsKeys.lists(), options));
};
/**
 * Hook return functions for canceling a batch job
 *
 * @param id - id of the batch job
 * @param options
 */

var useAdminCancelBatchJob = function useAdminCancelBatchJob(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.batchJobs.cancel(id);
  }, buildOptions(queryClient, [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)], options));
};
/**
 * Hook return functions for confirming a batch job
 *
 * @param id - id of the batch job
 * @param options
 */

var useAdminConfirmBatchJob = function useAdminConfirmBatchJob(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.batchJobs.confirm(id);
  }, buildOptions(queryClient, [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)], options));
};

var _excluded$s = ["data"],
    _excluded2$l = ["data"];
var ADMIN_ORDERS_QUERY_KEY = "admin_orders";
var adminOrderKeys = /*#__PURE__*/queryKeysFactory(ADMIN_ORDERS_QUERY_KEY);
var useAdminOrders = function useAdminOrders(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminOrderKeys.list(query), function () {
    return client.admin.orders.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$s);

  return _extends({}, data, rest);
};
var useAdminOrder = function useAdminOrder(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminOrderKeys.detail(id), function () {
    return client.admin.orders.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$l);

  return _extends({}, data, rest);
};

var _excluded$r = ["claim_id"],
    _excluded2$k = ["claim_id"],
    _excluded3$6 = ["claim_id"];
var useAdminCreateClaim = function useAdminCreateClaim(orderId, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.orders.createClaim(orderId, payload);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminUpdateClaim = function useAdminUpdateClaim(orderId, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref) {
    var claim_id = _ref.claim_id,
        payload = _objectWithoutPropertiesLoose(_ref, _excluded$r);

    return client.admin.orders.updateClaim(orderId, claim_id, payload);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminCancelClaim = function useAdminCancelClaim(orderId, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function (claimId) {
    return client.admin.orders.cancelClaim(orderId, claimId);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminFulfillClaim = function useAdminFulfillClaim(orderId, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref2) {
    var claim_id = _ref2.claim_id,
        payload = _objectWithoutPropertiesLoose(_ref2, _excluded2$k);

    return client.admin.orders.fulfillClaim(orderId, claim_id, payload);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminCancelClaimFulfillment = function useAdminCancelClaimFulfillment(orderId, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref3) {
    var claim_id = _ref3.claim_id,
        fulfillment_id = _ref3.fulfillment_id;
    return client.admin.orders.cancelClaimFulfillment(orderId, claim_id, fulfillment_id);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminCreateClaimShipment = function useAdminCreateClaimShipment(orderId, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref4) {
    var claim_id = _ref4.claim_id,
        payload = _objectWithoutPropertiesLoose(_ref4, _excluded3$6);

    return client.admin.orders.createClaimShipment(orderId, claim_id, payload);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};

var _excluded$q = ["data"],
    _excluded2$j = ["data"];
var ADMIN_COLLECTIONS_QUERY_KEY$1 = "admin_collections";
var adminCollectionKeys = /*#__PURE__*/queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY$1);
var useAdminCollections = function useAdminCollections(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminCollectionKeys.list(query), function () {
    return client.admin.collections.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$q);

  return _extends({}, data, rest);
};
var useAdminCollection = function useAdminCollection(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminCollectionKeys.detail(id), function () {
    return client.admin.collections.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$j);

  return _extends({}, data, rest);
};

var useAdminCreateCollection = function useAdminCreateCollection(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.collections.create(payload);
  }, buildOptions(queryClient, adminCollectionKeys.lists(), options));
};
var useAdminUpdateCollection = function useAdminUpdateCollection(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.collections.update(id, payload);
  }, buildOptions(queryClient, [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)], options));
};
var useAdminDeleteCollection = function useAdminDeleteCollection(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.collections["delete"](id);
  }, buildOptions(queryClient, [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)], options));
};
/**
 * Hook returns function for adding multiple products to a collection.
 *
 * @param id - id of the collection in which products are being added
 * @param options
 */

var useAdminAddProductsToCollection = function useAdminAddProductsToCollection(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.collections.addProducts(id, payload);
  }, buildOptions(queryClient, [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)], options));
};
/**
 * Hook returns function for removal of multiple products from a collection.
 *
 * @param id - id of the collection from which products will be removed
 * @param options
 */

var useAdminRemoveProductsFromCollection = function useAdminRemoveProductsFromCollection(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.collections.removeProducts(id, payload);
  }, buildOptions(queryClient, [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)], options));
};

var _excluded$p = ["data"],
    _excluded2$i = ["data"],
    _excluded3$5 = ["data"];
var ADMIN_CUSTOMER_GROUPS_QUERY_KEY = "admin_customer_groups";
var adminCustomerGroupKeys = /*#__PURE__*/_extends({}, /*#__PURE__*/queryKeysFactory(ADMIN_CUSTOMER_GROUPS_QUERY_KEY), {
  detailCustomer: function detailCustomer(id, query) {
    return [].concat(this.detail(id), ["customers", _extends({}, query || {})]);
  }
});
/**
 * Hook retrieves a customer group by id.
 *
 * @param id - customer group id
 * @param query - query params
 * @param options
 */

var useAdminCustomerGroup = function useAdminCustomerGroup(id, query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminCustomerGroupKeys.detail(id), function () {
    return client.admin.customerGroups.retrieve(id, query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$p);

  return _extends({}, data, rest);
};
/**
 * Hook retrieves a list of customer groups.
 *
 * @param query - pagination/filtering params
 * @param options
 */

var useAdminCustomerGroups = function useAdminCustomerGroups(query, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminCustomerGroupKeys.list(query), function () {
    return client.admin.customerGroups.list(query);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$i);

  return _extends({}, data, rest);
};
/**
 * Hook retrieves a list of customers that belong to provided groups.
 *
 * @param id - customer group id
 * @param query - pagination/filtering params
 * @param options
 */

var useAdminCustomerGroupCustomers = function useAdminCustomerGroupCustomers(id, query, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var _useQuery3 = useQuery(adminCustomerGroupKeys.detailCustomer(id, query), function () {
    return client.admin.customerGroups.listCustomers(id, query);
  }, options),
      data = _useQuery3.data,
      rest = _objectWithoutPropertiesLoose(_useQuery3, _excluded3$5);

  return _extends({}, data, rest);
};

/**
 * Hook returns functions for creating customer groups.
 *
 * @param options
 */

var useAdminCreateCustomerGroup = function useAdminCreateCustomerGroup(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.customerGroups.create(payload);
  }, buildOptions(queryClient, adminCustomerGroupKeys.lists(), options));
};
/**
 * Hook return functions for updating a customer group.
 *
 * @param id - id of the customer group that is being updated
 * @param options
 */

var useAdminUpdateCustomerGroup = function useAdminUpdateCustomerGroup(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.customerGroups.update(id, payload);
  }, buildOptions(queryClient, [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)], options));
};
/**
 * Hook return functions for deleting a customer group.
 *
 * @param id - id of the customer group that is being deleted
 * @param options
 */

var useAdminDeleteCustomerGroup = function useAdminDeleteCustomerGroup(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.customerGroups["delete"](id);
  }, buildOptions(queryClient, [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)], options));
};
/**
 * Hook returns functions for addition of multiple customers to a customer group.
 *
 * @param id - id of the customer group in which customers are being added
 * @param options
 */

var useAdminAddCustomersToCustomerGroup = function useAdminAddCustomersToCustomerGroup(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.customerGroups.addCustomers(id, payload);
  }, buildOptions(queryClient, [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detailCustomer(id)], options));
};
/**
 * Hook returns function for removal of multiple customers from a customer group.
 *
 * @param id - id of a group from which customers will be removed
 * @param options
 */

var useAdminRemoveCustomersFromCustomerGroup = function useAdminRemoveCustomersFromCustomerGroup(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.customerGroups.removeCustomers(id, payload);
  }, buildOptions(queryClient, [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detailCustomer(id)], options));
};

var _excluded$o = ["data"],
    _excluded2$h = ["data"];
var ADMIN_CUSTOMERS_QUERY_KEY = "admin_customers";
var adminCustomerKeys = /*#__PURE__*/queryKeysFactory(ADMIN_CUSTOMERS_QUERY_KEY);
var useAdminCustomers = function useAdminCustomers(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminCustomerKeys.list(query), function () {
    return client.admin.customers.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$o);

  return _extends({}, data, rest);
};
var useAdminCustomer = function useAdminCustomer(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminCustomerKeys.detail(id), function () {
    return client.admin.customers.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$h);

  return _extends({}, data, rest);
};

var useAdminCreateCustomer = function useAdminCreateCustomer(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.customers.create(payload);
  }, buildOptions(queryClient, adminCustomerKeys.lists(), options));
};
var useAdminUpdateCustomer = function useAdminUpdateCustomer(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.customers.update(id, payload);
  }, buildOptions(queryClient, [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)], options));
};

var _excluded$n = ["data"],
    _excluded2$g = ["data"],
    _excluded3$4 = ["data"],
    _excluded4 = ["data"];
var ADMIN_DISCOUNTS_QUERY_KEY = "admin_discounts";
var adminDiscountKeys = /*#__PURE__*/_extends({}, /*#__PURE__*/queryKeysFactory(ADMIN_DISCOUNTS_QUERY_KEY), {
  detailCondition: function detailCondition(id, query) {
    return [].concat(this.detail(id), ["condition", _extends({}, query || {})]);
  }
});
var useAdminDiscounts = function useAdminDiscounts(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminDiscountKeys.list(query), function () {
    return client.admin.discounts.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$n);

  return _extends({}, data, rest);
};
var useAdminDiscount = function useAdminDiscount(id, query, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminDiscountKeys.detail(id), function () {
    return client.admin.discounts.retrieve(id, query);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$g);

  return _extends({}, data, rest);
};
var useAdminGetDiscountByCode = function useAdminGetDiscountByCode(code, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var _useQuery3 = useQuery(adminDiscountKeys.detail(code), function () {
    return client.admin.discounts.retrieveByCode(code);
  }, options),
      data = _useQuery3.data,
      rest = _objectWithoutPropertiesLoose(_useQuery3, _excluded3$4);

  return _extends({}, data, rest);
};
var useAdminGetDiscountCondition = function useAdminGetDiscountCondition(id, conditionId, query, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var _useQuery4 = useQuery(adminDiscountKeys.detailCondition(conditionId), function () {
    return client.admin.discounts.getCondition(id, conditionId, query);
  }, options),
      data = _useQuery4.data,
      rest = _objectWithoutPropertiesLoose(_useQuery4, _excluded4);

  return _extends({}, data, rest);
};

var useAdminCreateDiscount = function useAdminCreateDiscount(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.discounts.create(payload);
  }, buildOptions(queryClient, adminDiscountKeys.lists(), options));
};
var useAdminUpdateDiscount = function useAdminUpdateDiscount(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.discounts.update(id, payload);
  }, buildOptions(queryClient, adminDiscountKeys.detail(id), options));
};
var useAdminDeleteDiscount = function useAdminDeleteDiscount(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.discounts["delete"](id);
  }, buildOptions(queryClient, adminDiscountKeys.lists(), options));
};
var useAdminDiscountAddRegion = function useAdminDiscountAddRegion(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (regionId) {
    return client.admin.discounts.addRegion(id, regionId);
  }, buildOptions(queryClient, adminDiscountKeys.detail(id), options));
};
var useAdminDiscountRemoveRegion = function useAdminDiscountRemoveRegion(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (regionId) {
    return client.admin.discounts.removeRegion(id, regionId);
  }, buildOptions(queryClient, adminDiscountKeys.detail(id), options));
};
var useAdminCreateDynamicDiscountCode = function useAdminCreateDynamicDiscountCode(id, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.discounts.createDynamicCode(id, payload);
  }, buildOptions(queryClient, [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)], options));
};
var useAdminDeleteDynamicDiscountCode = function useAdminDeleteDynamicDiscountCode(id, options) {
  var _useMedusa7 = useMedusa(),
      client = _useMedusa7.client;

  var queryClient = useQueryClient();
  return useMutation(function (code) {
    return client.admin.discounts.deleteDynamicCode(id, code);
  }, buildOptions(queryClient, [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)], options));
};
var useAdminDiscountCreateCondition = function useAdminDiscountCreateCondition(discountId, options) {
  var _useMedusa8 = useMedusa(),
      client = _useMedusa8.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.discounts.createCondition(discountId, payload);
  }, buildOptions(queryClient, adminDiscountKeys.detail(discountId), options));
};
var useAdminDiscountUpdateCondition = function useAdminDiscountUpdateCondition(discountId, conditionId, options) {
  var _useMedusa9 = useMedusa(),
      client = _useMedusa9.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.discounts.updateCondition(discountId, conditionId, payload);
  }, buildOptions(queryClient, adminDiscountKeys.detail(discountId), options));
};
var useAdminDiscountRemoveCondition = function useAdminDiscountRemoveCondition(discountId, options) {
  var _useMedusa10 = useMedusa(),
      client = _useMedusa10.client;

  var queryClient = useQueryClient();
  return useMutation(function (conditionId) {
    return client.admin.discounts.deleteCondition(discountId, conditionId);
  }, buildOptions(queryClient, adminDiscountKeys.detail(discountId), options));
};

var _excluded$m = ["data"],
    _excluded2$f = ["data"];
var ADMIN_DRAFT_ORDERS_QUERY_KEY = "admin_draft_orders";
var adminDraftOrderKeys = /*#__PURE__*/queryKeysFactory(ADMIN_DRAFT_ORDERS_QUERY_KEY);
var useAdminDraftOrders = function useAdminDraftOrders(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminDraftOrderKeys.list(query), function () {
    return client.admin.draftOrders.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$m);

  return _extends({}, data, rest);
};
var useAdminDraftOrder = function useAdminDraftOrder(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminDraftOrderKeys.detail(id), function () {
    return client.admin.draftOrders.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$f);

  return _extends({}, data, rest);
};

var _excluded$l = ["item_id"];
var useAdminCreateDraftOrder = function useAdminCreateDraftOrder(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.draftOrders.create(payload);
  }, buildOptions(queryClient, adminDraftOrderKeys.lists(), options));
};
var useAdminUpdateDraftOrder = function useAdminUpdateDraftOrder(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.draftOrders.update(id, payload);
  }, buildOptions(queryClient, [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()], options));
};
var useAdminDeleteDraftOrder = function useAdminDeleteDraftOrder(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.draftOrders["delete"](id);
  }, buildOptions(queryClient, [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()], options));
};
var useAdminDraftOrderRegisterPayment = function useAdminDraftOrderRegisterPayment(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.draftOrders.markPaid(id);
  }, buildOptions(queryClient, adminDraftOrderKeys.detail(id), options));
};
var useAdminDraftOrderAddLineItem = function useAdminDraftOrderAddLineItem(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.draftOrders.addLineItem(id, payload);
  }, buildOptions(queryClient, adminDraftOrderKeys.detail(id), options));
};
var useAdminDraftOrderRemoveLineItem = function useAdminDraftOrderRemoveLineItem(id, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function (itemId) {
    return client.admin.draftOrders.removeLineItem(id, itemId);
  }, buildOptions(queryClient, adminDraftOrderKeys.detail(id), options));
};
var useAdminDraftOrderUpdateLineItem = function useAdminDraftOrderUpdateLineItem(id, options) {
  var _useMedusa7 = useMedusa(),
      client = _useMedusa7.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref) {
    var item_id = _ref.item_id,
        payload = _objectWithoutPropertiesLoose(_ref, _excluded$l);

    return client.admin.draftOrders.updateLineItem(id, item_id, payload);
  }, buildOptions(queryClient, adminDraftOrderKeys.detail(id), options));
};

var _excluded$k = ["data"],
    _excluded2$e = ["data"];
var ADMIN_GIFT_CARDS_QUERY_KEY = "admin_gift_cards";
var adminGiftCardKeys = /*#__PURE__*/queryKeysFactory(ADMIN_GIFT_CARDS_QUERY_KEY);
var useAdminGiftCards = function useAdminGiftCards(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminGiftCardKeys.list(query), function () {
    return client.admin.giftCards.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$k);

  return _extends({}, data, rest);
};
var useAdminGiftCard = function useAdminGiftCard(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminGiftCardKeys.detail(id), function () {
    return client.admin.giftCards.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$e);

  return _extends({}, data, rest);
};

var useAdminCreateGiftCard = function useAdminCreateGiftCard(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.giftCards.create(payload);
  }, buildOptions(queryClient, adminGiftCardKeys.lists(), options));
};
var useAdminUpdateGiftCard = function useAdminUpdateGiftCard(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.giftCards.update(id, payload);
  }, buildOptions(queryClient, [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)], options));
};
var useAdminDeleteGiftCard = function useAdminDeleteGiftCard(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.giftCards["delete"](id);
  }, buildOptions(queryClient, [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)], options));
};

var _excluded$j = ["data"];
var ADMIN_INVITES_QUERY_KEY = "admin_invites";
var adminInviteKeys = /*#__PURE__*/queryKeysFactory(ADMIN_INVITES_QUERY_KEY);
var useAdminInvites = function useAdminInvites(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminInviteKeys.lists(), function () {
    return client.admin.invites.list();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$j);

  return _extends({}, data, rest);
};

var useAdminAcceptInvite = function useAdminAcceptInvite(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.invites.accept(payload);
  }, buildOptions(queryClient, adminInviteKeys.lists(), options));
};
var useAdminResendInvite = function useAdminResendInvite(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  return useMutation(function () {
    return client.admin.invites.resend(id);
  }, options);
};
var useAdminCreateInvite = function useAdminCreateInvite(options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.invites.create(payload);
  }, buildOptions(queryClient, adminInviteKeys.lists(), options));
};
var useAdminDeleteInvite = function useAdminDeleteInvite(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.invites["delete"](id);
  }, buildOptions(queryClient, [adminInviteKeys.lists(), adminInviteKeys.detail(id)], options));
};

var _excluded$i = ["data"],
    _excluded2$d = ["data"];
var ADMIN_NOTE_QUERY_KEY = "admin_notes";
var adminNoteKeys = /*#__PURE__*/queryKeysFactory(ADMIN_NOTE_QUERY_KEY);
var useAdminNotes = function useAdminNotes(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminNoteKeys.list(query), function () {
    return client.admin.notes.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$i);

  return _extends({}, data, rest);
};
var useAdminNote = function useAdminNote(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminNoteKeys.detail(id), function () {
    return client.admin.notes.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$d);

  return _extends({}, data, rest);
};

var useAdminCreateNote = function useAdminCreateNote(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.notes.create(payload);
  }, buildOptions(queryClient, adminNoteKeys.lists(), options));
};
var useAdminUpdateNote = function useAdminUpdateNote(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.notes.update(id, payload);
  }, buildOptions(queryClient, [adminNoteKeys.detail(id), adminNoteKeys.lists()], options));
};
var useAdminDeleteNote = function useAdminDeleteNote(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.notes["delete"](id);
  }, buildOptions(queryClient, [adminNoteKeys.detail(id), adminNoteKeys.lists()], options));
};

var _excluded$h = ["data"];
var ADMIN_NOTIFICATIONS_QUERY_KEY = "admin_notifications";
var adminNotificationKeys = /*#__PURE__*/queryKeysFactory(ADMIN_NOTIFICATIONS_QUERY_KEY);
var useAdminNotifications = function useAdminNotifications(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminNotificationKeys.list(query), function () {
    return client.admin.notifications.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$h);

  return _extends({}, data, rest);
};

var useAdminResendNotification = function useAdminResendNotification(id, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.notifications.resend(id, payload);
  }, buildOptions(queryClient, [adminNotificationKeys.lists(), adminNotificationKeys.detail(id)], options));
};

var useAdminUpdateOrder = function useAdminUpdateOrder(id, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.orders.update(id, payload);
  }, buildOptions(queryClient, [adminOrderKeys.lists(), adminOrderKeys.detail(id)], options));
};
var useAdminCancelOrder = function useAdminCancelOrder(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.orders.cancel(id);
  }, buildOptions(queryClient, [adminOrderKeys.lists(), adminOrderKeys.detail(id)], options));
};
var useAdminCompleteOrder = function useAdminCompleteOrder(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.orders.complete(id);
  }, buildOptions(queryClient, [adminOrderKeys.lists(), adminOrderKeys.detail(id)], options));
};
var useAdminCapturePayment = function useAdminCapturePayment(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.orders.capturePayment(id);
  }, buildOptions(queryClient, [adminOrderKeys.lists(), adminOrderKeys.detail(id)], options));
};
var useAdminRefundPayment = function useAdminRefundPayment(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.orders.refundPayment(id, payload);
  }, buildOptions(queryClient, [adminOrderKeys.lists(), adminOrderKeys.detail(id)], options));
};
var useAdminCreateFulfillment = function useAdminCreateFulfillment(orderId, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.orders.createFulfillment(orderId, payload);
  }, buildOptions(queryClient, [adminOrderKeys.lists(), adminOrderKeys.detail(orderId)], options));
};
var useAdminCancelFulfillment = function useAdminCancelFulfillment(orderId, options) {
  var _useMedusa7 = useMedusa(),
      client = _useMedusa7.client;

  var queryClient = useQueryClient();
  return useMutation(function (fulfillmentId) {
    return client.admin.orders.cancelFulfillment(orderId, fulfillmentId);
  }, buildOptions(queryClient, [adminOrderKeys.lists(), adminOrderKeys.detail(orderId)], options));
};
var useAdminCreateShipment = function useAdminCreateShipment(orderId, options) {
  var _useMedusa8 = useMedusa(),
      client = _useMedusa8.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.orders.createShipment(orderId, payload);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminRequestReturn = function useAdminRequestReturn(orderId, options) {
  var _useMedusa9 = useMedusa(),
      client = _useMedusa9.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.orders.requestReturn(orderId, payload);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminAddShippingMethod = function useAdminAddShippingMethod(orderId, options) {
  var _useMedusa10 = useMedusa(),
      client = _useMedusa10.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.orders.addShippingMethod(orderId, payload);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminArchiveOrder = function useAdminArchiveOrder(id, options) {
  var _useMedusa11 = useMedusa(),
      client = _useMedusa11.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.orders.archive(id);
  }, buildOptions(queryClient, [adminOrderKeys.lists(), adminOrderKeys.detail(id)], options));
};

var _excluded$g = ["data"],
    _excluded2$c = ["data"],
    _excluded3$3 = ["data"];
var ADMIN_PRICE_LISTS_QUERY_KEY = "admin_price_lists";
var adminPriceListKeys = /*#__PURE__*/_extends({}, /*#__PURE__*/queryKeysFactory(ADMIN_PRICE_LISTS_QUERY_KEY), {
  detailProducts: function detailProducts(id, query) {
    return [].concat(this.detail(id), ["products", _extends({}, query || {})]);
  }
});
var useAdminPriceLists = function useAdminPriceLists(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminPriceListKeys.list(query), function () {
    return client.admin.priceLists.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$g);

  return _extends({}, data, rest);
};
var useAdminPriceListProducts = function useAdminPriceListProducts(id, query, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminPriceListKeys.detailProducts(id, query), function () {
    return client.admin.priceLists.listProducts(id, query);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$c);

  return _extends({}, data, rest);
};
var useAdminPriceList = function useAdminPriceList(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var _useQuery3 = useQuery(adminPriceListKeys.detail(id), function () {
    return client.admin.priceLists.retrieve(id);
  }, options),
      data = _useQuery3.data,
      rest = _objectWithoutPropertiesLoose(_useQuery3, _excluded3$3);

  return _extends({}, data, rest);
};

var _excluded$f = ["data"],
    _excluded2$b = ["data"],
    _excluded3$2 = ["data"];
var ADMIN_PRODUCTS_QUERY_KEY = "admin_products";
var adminProductKeys = /*#__PURE__*/queryKeysFactory(ADMIN_PRODUCTS_QUERY_KEY);
var useAdminProducts = function useAdminProducts(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminProductKeys.list(query), function () {
    return client.admin.products.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$f);

  return _extends({}, data, rest);
};
var useAdminProduct = function useAdminProduct(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminProductKeys.detail(id), function () {
    return client.admin.products.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$b);

  return _extends({}, data, rest);
};
var useAdminProductTagUsage = function useAdminProductTagUsage(options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var _useQuery3 = useQuery(adminProductKeys.detail("tags"), function () {
    return client.admin.products.listTags();
  }, options),
      data = _useQuery3.data,
      rest = _objectWithoutPropertiesLoose(_useQuery3, _excluded3$2);

  return _extends({}, data, rest);
};

var _excluded$e = ["variant_id"],
    _excluded2$a = ["option_id"];
var useAdminCreateProduct = function useAdminCreateProduct(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.products.create(payload);
  }, buildOptions(queryClient, adminProductKeys.lists(), options));
};
var useAdminUpdateProduct = function useAdminUpdateProduct(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.products.update(id, payload);
  }, buildOptions(queryClient, [adminProductKeys.lists(), adminProductKeys.detail(id)], options));
};
var useAdminDeleteProduct = function useAdminDeleteProduct(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.products["delete"](id);
  }, buildOptions(queryClient, [adminProductKeys.lists(), adminProductKeys.detail(id)], options));
};
var useAdminCreateVariant = function useAdminCreateVariant(productId, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.products.createVariant(productId, payload);
  }, buildOptions(queryClient, [adminProductKeys.lists(), adminProductKeys.detail(productId)], options));
};
var useAdminUpdateVariant = function useAdminUpdateVariant(productId, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref) {
    var variant_id = _ref.variant_id,
        payload = _objectWithoutPropertiesLoose(_ref, _excluded$e);

    return client.admin.products.updateVariant(productId, variant_id, payload);
  }, buildOptions(queryClient, [adminProductKeys.lists(), adminProductKeys.detail(productId)], options));
};
var useAdminDeleteVariant = function useAdminDeleteVariant(productId, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function (variantId) {
    return client.admin.products.deleteVariant(productId, variantId);
  }, buildOptions(queryClient, [adminProductKeys.lists(), adminProductKeys.detail(productId)], options));
};
var useAdminCreateProductOption = function useAdminCreateProductOption(productId, options) {
  var _useMedusa7 = useMedusa(),
      client = _useMedusa7.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.products.addOption(productId, payload);
  }, buildOptions(queryClient, adminProductKeys.detail(productId), options));
};
var useAdminUpdateProductOption = function useAdminUpdateProductOption(productId, options) {
  var _useMedusa8 = useMedusa(),
      client = _useMedusa8.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref2) {
    var option_id = _ref2.option_id,
        payload = _objectWithoutPropertiesLoose(_ref2, _excluded2$a);

    return client.admin.products.updateOption(productId, option_id, payload);
  }, buildOptions(queryClient, adminProductKeys.detail(productId), options));
};
var useAdminDeleteProductOption = function useAdminDeleteProductOption(productId, options) {
  var _useMedusa9 = useMedusa(),
      client = _useMedusa9.client;

  var queryClient = useQueryClient();
  return useMutation(function (optionId) {
    return client.admin.products.deleteOption(productId, optionId);
  }, buildOptions(queryClient, adminProductKeys.detail(productId), options));
};

var _excluded$d = ["data"];
var ADMIN_VARIANT_QUERY_KEY = "admin_variants";
var adminVariantKeys = /*#__PURE__*/queryKeysFactory(ADMIN_VARIANT_QUERY_KEY);
var useAdminVariants = function useAdminVariants(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminVariantKeys.list(query), function () {
    return client.admin.variants.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$d);

  return _extends({}, data, rest);
};

var useAdminCreatePriceList = function useAdminCreatePriceList(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.priceLists.create(payload);
  }, buildOptions(queryClient, adminPriceListKeys.lists(), options));
};
var useAdminUpdatePriceList = function useAdminUpdatePriceList(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.priceLists.update(id, payload);
  }, buildOptions(queryClient, [adminPriceListKeys.detail(id), adminPriceListKeys.lists(), adminPriceListKeys.detailProducts(id)], options));
};
var useAdminDeletePriceList = function useAdminDeletePriceList(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.priceLists["delete"](id);
  }, buildOptions(queryClient, [adminPriceListKeys.detail(id), adminPriceListKeys.lists()], options));
};
var useAdminCreatePriceListPrices = function useAdminCreatePriceListPrices(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.priceLists.addPrices(id, payload);
  }, buildOptions(queryClient, [adminPriceListKeys.lists(), adminPriceListKeys.detailProducts(id)], options));
};
var useAdminDeletePriceListPrices = function useAdminDeletePriceListPrices(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.priceLists.deletePrices(id, payload);
  }, buildOptions(queryClient, [adminPriceListKeys.detail(id), adminPriceListKeys.lists(), adminPriceListKeys.detailProducts(id)], options));
};
var useAdminDeletePriceListProductPrices = function useAdminDeletePriceListProductPrices(id, productId, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.priceLists.deleteProductPrices(id, productId);
  }, buildOptions(queryClient, [adminPriceListKeys.detail(id), adminPriceListKeys.lists(), adminProductKeys.detail(productId)], options));
};
var useAdminDeletePriceListVariantPrices = function useAdminDeletePriceListVariantPrices(id, variantId, options) {
  var _useMedusa7 = useMedusa(),
      client = _useMedusa7.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.priceLists.deleteVariantPrices(id, variantId);
  }, buildOptions(queryClient, [adminPriceListKeys.detail(id), adminPriceListKeys.lists(), adminVariantKeys.detail(variantId)], options));
};

var _excluded$c = ["data"];
var ADMIN_PRODUCT_TAGS_QUERY_KEY = "admin_product_tags";
var adminProductTagKeys = /*#__PURE__*/queryKeysFactory(ADMIN_PRODUCT_TAGS_QUERY_KEY);
var useAdminProductTags = function useAdminProductTags(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminProductTagKeys.list(query), function () {
    return client.admin.productTags.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$c);

  return _extends({}, data, rest);
};

var _excluded$b = ["data"];
var ADMIN_PRODUCT_TYPES_QUERY_KEY = "admin_product_types";
var adminProductTypeKeys = /*#__PURE__*/queryKeysFactory(ADMIN_PRODUCT_TYPES_QUERY_KEY);
var useAdminProductTypes = function useAdminProductTypes(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminProductTypeKeys.list(query), function () {
    return client.admin.productTypes.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$b);

  return _extends({}, data, rest);
};

var _excluded$a = ["data"],
    _excluded2$9 = ["data"],
    _excluded3$1 = ["data"];
var ADMIN_REGIONS_QUERY_KEY = "admin_regions";
var adminRegionKeys = /*#__PURE__*/queryKeysFactory(ADMIN_REGIONS_QUERY_KEY);
var useAdminRegions = function useAdminRegions(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminRegionKeys.list(query), function () {
    return client.admin.regions.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$a);

  return _extends({}, data, rest);
};
var useAdminRegion = function useAdminRegion(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminRegionKeys.detail(id), function () {
    return client.admin.regions.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$9);

  return _extends({}, data, rest);
};
var useAdminRegionFulfillmentOptions = function useAdminRegionFulfillmentOptions(regionId, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var _useQuery3 = useQuery(adminRegionKeys.detail(regionId + "_fullfillment-options"), function () {
    return client.admin.regions.retrieveFulfillmentOptions(regionId);
  }, options),
      data = _useQuery3.data,
      rest = _objectWithoutPropertiesLoose(_useQuery3, _excluded3$1);

  return _extends({}, data, rest);
};

var useAdminCreateRegion = function useAdminCreateRegion(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.regions.create(payload);
  }, buildOptions(queryClient, adminRegionKeys.lists(), options));
};
var useAdminUpdateRegion = function useAdminUpdateRegion(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.regions.update(id, payload);
  }, buildOptions(queryClient, [adminRegionKeys.lists(), adminRegionKeys.detail(id)], options));
};
var useAdminDeleteRegion = function useAdminDeleteRegion(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.regions["delete"](id);
  }, buildOptions(queryClient, [adminRegionKeys.lists(), adminRegionKeys.detail(id)], options));
};
var useAdminRegionAddCountry = function useAdminRegionAddCountry(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.regions.addCountry(id, payload);
  }, buildOptions(queryClient, adminRegionKeys.detail(id), options));
};
var useAdminRegionRemoveCountry = function useAdminRegionRemoveCountry(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (country_code) {
    return client.admin.regions.deleteCountry(id, country_code);
  }, buildOptions(queryClient, adminRegionKeys.detail(id), options));
};
var useAdminRegionAddFulfillmentProvider = function useAdminRegionAddFulfillmentProvider(id, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.regions.addFulfillmentProvider(id, payload);
  }, buildOptions(queryClient, adminRegionKeys.detail(id), options));
};
var useAdminRegionDeleteFulfillmentProvider = function useAdminRegionDeleteFulfillmentProvider(id, options) {
  var _useMedusa7 = useMedusa(),
      client = _useMedusa7.client;

  var queryClient = useQueryClient();
  return useMutation(function (provider_id) {
    return client.admin.regions.deleteFulfillmentProvider(id, provider_id);
  }, buildOptions(queryClient, adminRegionKeys.detail(id), options));
};
var useAdminRegionAddPaymentProvider = function useAdminRegionAddPaymentProvider(id, options) {
  var _useMedusa8 = useMedusa(),
      client = _useMedusa8.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.regions.addPaymentProvider(id, payload);
  }, buildOptions(queryClient, adminRegionKeys.detail(id), options));
};
var useAdminRegionDeletePaymentProvider = function useAdminRegionDeletePaymentProvider(id, options) {
  var _useMedusa9 = useMedusa(),
      client = _useMedusa9.client;

  var queryClient = useQueryClient();
  return useMutation(function (provider_id) {
    return client.admin.regions.deletePaymentProvider(id, provider_id);
  }, buildOptions(queryClient, adminRegionKeys.detail(id), options));
};

var _excluded$9 = ["data"],
    _excluded2$8 = ["data"];
var ADMIN_RETURNS_REASONS_QUERY_KEY = "admin_return_reasons";
var adminReturnReasonKeys = /*#__PURE__*/queryKeysFactory(ADMIN_RETURNS_REASONS_QUERY_KEY);
var useAdminReturnReasons = function useAdminReturnReasons(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminReturnReasonKeys.lists(), function () {
    return client.admin.returnReasons.list();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$9);

  return _extends({}, data, rest);
};
var useAdminReturnReason = function useAdminReturnReason(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminReturnReasonKeys.detail(id), function () {
    return client.admin.returnReasons.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$8);

  return _extends({}, data, rest);
};

var useAdminCreateReturnReason = function useAdminCreateReturnReason(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.returnReasons.create(payload);
  }, buildOptions(queryClient, adminReturnReasonKeys.lists(), options));
};
var useAdminUpdateReturnReason = function useAdminUpdateReturnReason(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.returnReasons.update(id, payload);
  }, buildOptions(queryClient, [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()], options));
};
var useAdminDeleteReturnReason = function useAdminDeleteReturnReason(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.returnReasons["delete"](id);
  }, buildOptions(queryClient, [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()], options));
};

var _excluded$8 = ["data"];
var ADMIN_RETURNS_QUERY_KEY = "admin_returns";
var adminReturnKeys = /*#__PURE__*/queryKeysFactory(ADMIN_RETURNS_QUERY_KEY);
var useAdminReturns = function useAdminReturns(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminReturnKeys.lists(), function () {
    return client.admin.returns.list();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$8);

  return _extends({}, data, rest);
};

var useAdminReceiveReturn = function useAdminReceiveReturn(id, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.returns.receive(id, payload);
  }, buildOptions(queryClient, [adminReturnKeys.detail(id), adminReturnKeys.list()], options));
};
var useAdminCancelReturn = function useAdminCancelReturn(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.returns.cancel(id);
  }, buildOptions(queryClient, [adminReturnKeys.detail(id), adminReturnKeys.list()], options));
};

var _excluded$7 = ["data"],
    _excluded2$7 = ["data"];
var ADMIN_SALES_CHANNELS_QUERY_KEY = "admin_sales_channels";
var adminSalesChannelsKeys = /*#__PURE__*/queryKeysFactory(ADMIN_SALES_CHANNELS_QUERY_KEY);
/** retrieve a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable feature flag `sales_channels` in your medusa backend project.
 * @description gets a sales channel
 * @returns a medusa sales channel
 */

var useAdminSalesChannel = function useAdminSalesChannel(id, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminSalesChannelsKeys.detail(id), function () {
    return client.admin.salesChannels.retrieve(id);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$7);

  return _extends({}, data, rest);
};
/**
 * retrieve a list of sales channels
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable feature flag `sales_channels` in your medusa backend project.
 * @description Retrieve a list of sales channel
 * @returns a list of sales channel as well as the pagination properties
 */

var useAdminSalesChannels = function useAdminSalesChannels(query, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminSalesChannelsKeys.list(query), function () {
    return client.admin.salesChannels.list(query);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$7);

  return _extends({}, data, rest);
};

/**
 * Hook provides a mutation function for creating sales channel.
 *
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable the corresponding feature flag in your medusa backend project.
 */

var useAdminCreateSalesChannel = function useAdminCreateSalesChannel(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.salesChannels.create(payload);
  }, buildOptions(queryClient, [adminSalesChannelsKeys.list()], options));
};
/** update a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable feature flag `sales_channels` in your medusa backend project.
 * @description updates a sales channel
 * @returns the updated medusa sales channel
 */

var useAdminUpdateSalesChannel = function useAdminUpdateSalesChannel(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.salesChannels.update(id, payload);
  }, buildOptions(queryClient, [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id)], options));
};
/**
 * Delete a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
 * @param id
 * @param options
 */

var useAdminDeleteSalesChannel = function useAdminDeleteSalesChannel(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.salesChannels["delete"](id);
  }, buildOptions(queryClient, [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id)], options));
};
/**
 * Remove products from a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
 * @description remove products from a sales channel
 * @param id
 * @param options
 */

var useAdminDeleteProductsFromSalesChannel = function useAdminDeleteProductsFromSalesChannel(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.salesChannels.removeProducts(id, payload);
  }, buildOptions(queryClient, [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id), adminProductKeys.list({
    sales_channel_id: [id]
  })], options));
};
/**
 * Add products to a sales channel
 * @experimental This feature is under development and may change in the future.
 * To use this feature please enable featureflag `sales_channels` in your medusa backend project.
 * @description Add products to a sales channel
 * @param id
 * @param options
 */

var useAdminAddProductsToSalesChannel = function useAdminAddProductsToSalesChannel(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.salesChannels.addProducts(id, payload);
  }, buildOptions(queryClient, [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id), adminProductKeys.list({
    sales_channel_id: [id]
  })], options));
};

var _excluded$6 = ["data"],
    _excluded2$6 = ["data"];
var ADMIN_SHIPPING_OPTIONS_QUERY_KEY = "admin_shipping_options";
var adminShippingOptionKeys = /*#__PURE__*/queryKeysFactory(ADMIN_SHIPPING_OPTIONS_QUERY_KEY);
var useAdminShippingOptions = function useAdminShippingOptions(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminShippingOptionKeys.list(query), function () {
    return client.admin.shippingOptions.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$6);

  return _extends({}, data, rest);
};
var useAdminShippingOption = function useAdminShippingOption(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminShippingOptionKeys.detail(id), function () {
    return client.admin.shippingOptions.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$6);

  return _extends({}, data, rest);
};

var useAdminCreateShippingOption = function useAdminCreateShippingOption(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.shippingOptions.create(payload);
  }, buildOptions(queryClient, adminShippingOptionKeys.lists(), options));
};
var useAdminUpdateShippingOption = function useAdminUpdateShippingOption(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.shippingOptions.update(id, payload);
  }, buildOptions(queryClient, [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)], options));
};
var useAdminDeleteShippingOption = function useAdminDeleteShippingOption(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.shippingOptions["delete"](id);
  }, buildOptions(queryClient, [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)], options));
};

var _excluded$5 = ["data"],
    _excluded2$5 = ["data"];
var ADMIN_COLLECTIONS_QUERY_KEY = "admin_shippingProfiles";
var adminShippingProfileKeys = /*#__PURE__*/queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY);
var useAdminShippingProfiles = function useAdminShippingProfiles(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminShippingProfileKeys.lists(), function () {
    return client.admin.shippingProfiles.list();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$5);

  return _extends({}, data, rest);
};
var useAdminShippingProfile = function useAdminShippingProfile(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminShippingProfileKeys.detail(id), function () {
    return client.admin.shippingProfiles.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$5);

  return _extends({}, data, rest);
};

var useAdminCreateShippingProfile = function useAdminCreateShippingProfile(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.shippingProfiles.create(payload);
  }, buildOptions(queryClient, adminShippingProfileKeys.lists(), options));
};
var useAdminUpdateShippingProfile = function useAdminUpdateShippingProfile(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.shippingProfiles.update(id, payload);
  }, buildOptions(queryClient, [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)], options));
};
var useAdminDeleteShippingProfile = function useAdminDeleteShippingProfile(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.shippingProfiles["delete"](id);
  }, buildOptions(queryClient, [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)], options));
};

var _excluded$4 = ["data"],
    _excluded2$4 = ["data"],
    _excluded3 = ["data"];
var ADMIN_STORE_QUERY_KEY = "admin_store";
var adminStoreKeys = /*#__PURE__*/queryKeysFactory(ADMIN_STORE_QUERY_KEY);
var useAdminStorePaymentProviders = function useAdminStorePaymentProviders(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminStoreKeys.detail("payment_providers"), function () {
    return client.admin.store.listPaymentProviders();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$4);

  return _extends({}, data, rest);
};
var useAdminStoreTaxProviders = function useAdminStoreTaxProviders(options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminStoreKeys.detail("tax_providers"), function () {
    return client.admin.store.listTaxProviders();
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$4);

  return _extends({}, data, rest);
};
var useAdminStore = function useAdminStore(options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var _useQuery3 = useQuery(adminStoreKeys.details(), function () {
    return client.admin.store.retrieve();
  }, options),
      data = _useQuery3.data,
      rest = _objectWithoutPropertiesLoose(_useQuery3, _excluded3);

  return _extends({}, data, rest);
};

var useAdminUpdateStore = function useAdminUpdateStore(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.store.update(payload);
  }, buildOptions(queryClient, adminStoreKeys.details(), options));
};
var useAdminAddStoreCurrency = function useAdminAddStoreCurrency(options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (currency_code) {
    return client.admin.store.deleteCurrency(currency_code);
  }, buildOptions(queryClient, adminStoreKeys.details(), options));
};
var useAdminDeleteStoreCurrency = function useAdminDeleteStoreCurrency(options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function (currency_code) {
    return client.admin.store.deleteCurrency(currency_code);
  }, buildOptions(queryClient, adminStoreKeys.details(), options));
};

var _excluded$3 = ["data"],
    _excluded2$3 = ["data"];
var ADMIN_SWAPS_QUERY_KEY = "admin_swaps";
var adminSwapKeys = /*#__PURE__*/queryKeysFactory(ADMIN_SWAPS_QUERY_KEY);
var useAdminSwaps = function useAdminSwaps(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminSwapKeys.list(query), function () {
    return client.admin.swaps.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$3);

  return _extends({}, data, rest);
};
var useAdminSwap = function useAdminSwap(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminSwapKeys.detail(id), function () {
    return client.admin.swaps.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$3);

  return _extends({}, data, rest);
};

var _excluded$2 = ["swap_id"],
    _excluded2$2 = ["swap_id"];
var useAdminCreateSwap = function useAdminCreateSwap(orderId, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.orders.createSwap(orderId, payload);
  }, buildOptions(queryClient, [adminOrderKeys.detail(orderId), adminSwapKeys.lists()], options));
};
var useAdminCancelSwap = function useAdminCancelSwap(orderId, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (swapId) {
    return client.admin.orders.cancelSwap(orderId, swapId);
  }, buildOptions(queryClient, [adminOrderKeys.detail(orderId), adminSwapKeys.lists()], options));
};
var useAdminFulfillSwap = function useAdminFulfillSwap(orderId, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref) {
    var swap_id = _ref.swap_id,
        payload = _objectWithoutPropertiesLoose(_ref, _excluded$2);

    return client.admin.orders.fulfillSwap(orderId, swap_id, payload);
  }, buildOptions(queryClient, [adminOrderKeys.detail(orderId), adminSwapKeys.lists()], options));
};
var useAdminCreateSwapShipment = function useAdminCreateSwapShipment(orderId, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref2) {
    var swap_id = _ref2.swap_id,
        payload = _objectWithoutPropertiesLoose(_ref2, _excluded2$2);

    return client.admin.orders.createSwapShipment(orderId, swap_id, payload);
  }, buildOptions(queryClient, adminOrderKeys.detail(orderId), options));
};
var useAdminProcessSwapPayment = function useAdminProcessSwapPayment(orderId, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (swapId) {
    return client.admin.orders.processSwapPayment(orderId, swapId);
  }, buildOptions(queryClient, [adminOrderKeys.detail(orderId), adminSwapKeys.lists()], options));
};
var useAdminCancelSwapFulfillment = function useAdminCancelSwapFulfillment(orderId, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function (_ref3) {
    var swap_id = _ref3.swap_id,
        fulfillment_id = _ref3.fulfillment_id;
    return client.admin.orders.cancelSwapFulfillment(orderId, swap_id, fulfillment_id);
  }, buildOptions(queryClient, [adminOrderKeys.detail(orderId), adminSwapKeys.lists()], options));
};

var _excluded$1 = ["data"],
    _excluded2$1 = ["data"];
var ADMIN_TAX_RATES_QUERY_KEY = "admin_tax_rates";
var adminTaxRateKeys = /*#__PURE__*/queryKeysFactory(ADMIN_TAX_RATES_QUERY_KEY);
var useAdminTaxRates = function useAdminTaxRates(query, options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminTaxRateKeys.list(query), function () {
    return client.admin.taxRates.list(query);
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded$1);

  return _extends({}, data, rest);
};
var useAdminTaxRate = function useAdminTaxRate(id, query, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminTaxRateKeys.detail(id), function () {
    return client.admin.taxRates.retrieve(id, query);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2$1);

  return _extends({}, data, rest);
};

var useAdminCreateTaxRate = function useAdminCreateTaxRate(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.taxRates.create(payload);
  }, buildOptions(queryClient, adminTaxRateKeys.lists(), options));
};
var useAdminUpdateTaxRate = function useAdminUpdateTaxRate(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.taxRates.update(id, payload);
  }, buildOptions(queryClient, [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)], options));
};
var useAdminDeleteTaxRate = function useAdminDeleteTaxRate(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.taxRates["delete"](id);
  }, buildOptions(queryClient, [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)], options));
};
var useAdminCreateProductTaxRates = function useAdminCreateProductTaxRates(id, options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.taxRates.addProducts(id, payload);
  }, buildOptions(queryClient, [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)], options));
};
var useAdminDeleteProductTaxRates = function useAdminDeleteProductTaxRates(id, options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.taxRates.removeProducts(id, payload);
  }, buildOptions(queryClient, [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)], options));
};
var useAdminCreateProductTypeTaxRates = function useAdminCreateProductTypeTaxRates(id, options) {
  var _useMedusa6 = useMedusa(),
      client = _useMedusa6.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.taxRates.addProductTypes(id, payload);
  }, buildOptions(queryClient, [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)], options));
};
var useAdminDeleteProductTypeTaxRates = function useAdminDeleteProductTypeTaxRates(id, options) {
  var _useMedusa7 = useMedusa(),
      client = _useMedusa7.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.taxRates.removeProductTypes(id, payload);
  }, buildOptions(queryClient, [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)], options));
};
var useAdminCreateShippingTaxRates = function useAdminCreateShippingTaxRates(id, options) {
  var _useMedusa8 = useMedusa(),
      client = _useMedusa8.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.taxRates.addShippingOptions(id, payload);
  }, buildOptions(queryClient, [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)], options));
};
var useAdminDeleteShippingTaxRates = function useAdminDeleteShippingTaxRates(id, options) {
  var _useMedusa9 = useMedusa(),
      client = _useMedusa9.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.taxRates.removeShippingOptions(id, payload);
  }, buildOptions(queryClient, [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)], options));
};

var _excluded = ["data"],
    _excluded2 = ["data"];
var ADMIN_USERS_QUERY_KEY = "admin_users";
var adminUserKeys = /*#__PURE__*/queryKeysFactory(ADMIN_USERS_QUERY_KEY);
var useAdminUsers = function useAdminUsers(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var _useQuery = useQuery(adminUserKeys.lists(), function () {
    return client.admin.users.list();
  }, options),
      data = _useQuery.data,
      rest = _objectWithoutPropertiesLoose(_useQuery, _excluded);

  return _extends({}, data, rest);
};
var useAdminUser = function useAdminUser(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var _useQuery2 = useQuery(adminUserKeys.detail(id), function () {
    return client.admin.users.retrieve(id);
  }, options),
      data = _useQuery2.data,
      rest = _objectWithoutPropertiesLoose(_useQuery2, _excluded2);

  return _extends({}, data, rest);
};

var useAdminCreateUser = function useAdminCreateUser(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.users.create(payload);
  }, buildOptions(queryClient, adminCustomerKeys.lists(), options));
};
var useAdminUpdateUser = function useAdminUpdateUser(id, options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.users.update(id, payload);
  }, buildOptions(queryClient, [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)], options));
};
var useAdminDeleteUser = function useAdminDeleteUser(id, options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function () {
    return client.admin.users["delete"](id);
  }, buildOptions(queryClient, [adminCustomerKeys.detail(id), adminCustomerKeys.lists()], options));
};
var useAdminResetPassword = function useAdminResetPassword(options) {
  var _useMedusa4 = useMedusa(),
      client = _useMedusa4.client;

  return useMutation(function (payload) {
    return client.admin.users.resetPassword(payload);
  }, options);
};
var useAdminSendResetPasswordToken = function useAdminSendResetPasswordToken(options) {
  var _useMedusa5 = useMedusa(),
      client = _useMedusa5.client;

  return useMutation(function (payload) {
    return client.admin.users.sendResetPasswordToken(payload);
  }, options);
};

var useAdminUploadFile = function useAdminUploadFile(options) {
  var _useMedusa = useMedusa(),
      client = _useMedusa.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.uploads.create(payload);
  }, buildOptions(queryClient, undefined, options));
};
var useAdminCreatePresignedDownloadUrl = function useAdminCreatePresignedDownloadUrl(options) {
  var _useMedusa2 = useMedusa(),
      client = _useMedusa2.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.uploads.getPresignedDownloadUrl(payload);
  }, buildOptions(queryClient, undefined, options));
};
var useAdminDeleteFile = function useAdminDeleteFile(options) {
  var _useMedusa3 = useMedusa(),
      client = _useMedusa3.client;

  var queryClient = useQueryClient();
  return useMutation(function (payload) {
    return client.admin.uploads["delete"](payload);
  }, buildOptions(queryClient, undefined, options));
};

export { CartProvider, MedusaProvider, SessionCartProvider, adminAuthKeys, adminBatchJobsKeys, adminCollectionKeys, adminCustomerGroupKeys, adminCustomerKeys, adminDiscountKeys, adminDraftOrderKeys, adminGiftCardKeys, adminInviteKeys, adminNoteKeys, adminNotificationKeys, adminOrderKeys, adminPriceListKeys, adminProductKeys, adminProductTagKeys, adminProductTypeKeys, adminRegionKeys, adminReturnKeys, adminReturnReasonKeys, adminSalesChannelsKeys, adminShippingOptionKeys, adminShippingProfileKeys, adminStoreKeys, adminSwapKeys, adminTaxRateKeys, adminUserKeys, adminVariantKeys, cartKeys, collectionKeys, computeAmount, computeVariantPrice, customerKeys, formatAmount, formatVariantPrice, generateCartState, getVariantPrice, giftCardKeys, orderKeys, productKeys, useAddShippingMethodToCart, useAdminAcceptInvite, useAdminAddCustomersToCustomerGroup, useAdminAddProductsToCollection, useAdminAddProductsToSalesChannel, useAdminAddShippingMethod, useAdminAddStoreCurrency, useAdminArchiveOrder, useAdminBatchJob, useAdminBatchJobs, useAdminCancelBatchJob, useAdminCancelClaim, useAdminCancelClaimFulfillment, useAdminCancelFulfillment, useAdminCancelOrder, useAdminCancelReturn, useAdminCancelSwap, useAdminCancelSwapFulfillment, useAdminCapturePayment, useAdminCollection, useAdminCollections, useAdminCompleteOrder, useAdminConfirmBatchJob, useAdminCreateBatchJob, useAdminCreateClaim, useAdminCreateClaimShipment, useAdminCreateCollection, useAdminCreateCustomer, useAdminCreateCustomerGroup, useAdminCreateDiscount, useAdminCreateDraftOrder, useAdminCreateDynamicDiscountCode, useAdminCreateFulfillment, useAdminCreateGiftCard, useAdminCreateInvite, useAdminCreateNote, useAdminCreatePresignedDownloadUrl, useAdminCreatePriceList, useAdminCreatePriceListPrices, useAdminCreateProduct, useAdminCreateProductOption, useAdminCreateProductTaxRates, useAdminCreateProductTypeTaxRates, useAdminCreateRegion, useAdminCreateReturnReason, useAdminCreateSalesChannel, useAdminCreateShipment, useAdminCreateShippingOption, useAdminCreateShippingProfile, useAdminCreateShippingTaxRates, useAdminCreateSwap, useAdminCreateSwapShipment, useAdminCreateTaxRate, useAdminCreateUser, useAdminCreateVariant, useAdminCustomer, useAdminCustomerGroup, useAdminCustomerGroupCustomers, useAdminCustomerGroups, useAdminCustomers, useAdminDeleteCollection, useAdminDeleteCustomerGroup, useAdminDeleteDiscount, useAdminDeleteDraftOrder, useAdminDeleteDynamicDiscountCode, useAdminDeleteFile, useAdminDeleteGiftCard, useAdminDeleteInvite, useAdminDeleteNote, useAdminDeletePriceList, useAdminDeletePriceListPrices, useAdminDeletePriceListProductPrices, useAdminDeletePriceListVariantPrices, useAdminDeleteProduct, useAdminDeleteProductOption, useAdminDeleteProductTaxRates, useAdminDeleteProductTypeTaxRates, useAdminDeleteProductsFromSalesChannel, useAdminDeleteRegion, useAdminDeleteReturnReason, useAdminDeleteSalesChannel, useAdminDeleteSession, useAdminDeleteShippingOption, useAdminDeleteShippingProfile, useAdminDeleteShippingTaxRates, useAdminDeleteStoreCurrency, useAdminDeleteTaxRate, useAdminDeleteUser, useAdminDeleteVariant, useAdminDiscount, useAdminDiscountAddRegion, useAdminDiscountCreateCondition, useAdminDiscountRemoveCondition, useAdminDiscountRemoveRegion, useAdminDiscountUpdateCondition, useAdminDiscounts, useAdminDraftOrder, useAdminDraftOrderAddLineItem, useAdminDraftOrderRegisterPayment, useAdminDraftOrderRemoveLineItem, useAdminDraftOrderUpdateLineItem, useAdminDraftOrders, useAdminFulfillClaim, useAdminFulfillSwap, useAdminGetDiscountByCode, useAdminGetDiscountCondition, useAdminGetSession, useAdminGiftCard, useAdminGiftCards, useAdminInvites, useAdminLogin, useAdminNote, useAdminNotes, useAdminNotifications, useAdminOrder, useAdminOrders, useAdminPriceList, useAdminPriceListProducts, useAdminPriceLists, useAdminProcessSwapPayment, useAdminProduct, useAdminProductTagUsage, useAdminProductTags, useAdminProductTypes, useAdminProducts, useAdminReceiveReturn, useAdminRefundPayment, useAdminRegion, useAdminRegionAddCountry, useAdminRegionAddFulfillmentProvider, useAdminRegionAddPaymentProvider, useAdminRegionDeleteFulfillmentProvider, useAdminRegionDeletePaymentProvider, useAdminRegionFulfillmentOptions, useAdminRegionRemoveCountry, useAdminRegions, useAdminRemoveCustomersFromCustomerGroup, useAdminRemoveProductsFromCollection, useAdminRequestReturn, useAdminResendInvite, useAdminResendNotification, useAdminResetPassword, useAdminReturnReason, useAdminReturnReasons, useAdminReturns, useAdminSalesChannel, useAdminSalesChannels, useAdminSendResetPasswordToken, useAdminShippingOption, useAdminShippingOptions, useAdminShippingProfile, useAdminShippingProfiles, useAdminStore, useAdminStorePaymentProviders, useAdminStoreTaxProviders, useAdminSwap, useAdminSwaps, useAdminTaxRate, useAdminTaxRates, useAdminUpdateClaim, useAdminUpdateCollection, useAdminUpdateCustomer, useAdminUpdateCustomerGroup, useAdminUpdateDiscount, useAdminUpdateDraftOrder, useAdminUpdateGiftCard, useAdminUpdateNote, useAdminUpdateOrder, useAdminUpdatePriceList, useAdminUpdateProduct, useAdminUpdateProductOption, useAdminUpdateRegion, useAdminUpdateReturnReason, useAdminUpdateSalesChannel, useAdminUpdateShippingOption, useAdminUpdateShippingProfile, useAdminUpdateStore, useAdminUpdateTaxRate, useAdminUpdateUser, useAdminUpdateVariant, useAdminUploadFile, useAdminUser, useAdminUsers, useAdminVariants, useCart, useCartOrder, useCartShippingOptions, useCartSwap, useCollection, useCollections, useCompleteCart, useCreateCart, useCreateCustomer, useCreateLineItem, useCreatePaymentSession, useCreateReturn, useCreateSwap, useCustomerOrders, useDeleteLineItem, useDeletePaymentSession, useGetCart, useGiftCard, useMeCustomer, useMedusa, useOrder, useOrders, useProduct, useProducts, useRefreshPaymentSession, useRegion, useRegions, useReturnReason, useReturnReasons, useSessionCart, useSetPaymentSession, useShippingOptions, useStartCheckout, useUpdateCart, useUpdateLineItem, useUpdateMe, useUpdatePaymentSession };
//# sourceMappingURL=medusa-react.esm.js.map
