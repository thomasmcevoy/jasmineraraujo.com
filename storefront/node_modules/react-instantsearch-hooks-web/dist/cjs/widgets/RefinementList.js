"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RefinementList = RefinementList;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _reactInstantsearchHooks = require("react-instantsearch-hooks");

var _RefinementList = require("../ui/RefinementList");

var _SearchBox = require("../ui/SearchBox");

var _excluded = ["searchable", "searchablePlaceholder", "attribute", "operator", "limit", "showMore", "showMoreLimit", "sortBy", "escapeFacetValues", "transformItems"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function RefinementList(_ref) {
  var searchable = _ref.searchable,
      searchablePlaceholder = _ref.searchablePlaceholder,
      attribute = _ref.attribute,
      operator = _ref.operator,
      limit = _ref.limit,
      showMore = _ref.showMore,
      showMoreLimit = _ref.showMoreLimit,
      sortBy = _ref.sortBy,
      escapeFacetValues = _ref.escapeFacetValues,
      transformItems = _ref.transformItems,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _useRefinementList = (0, _reactInstantsearchHooks.useRefinementList)({
    attribute: attribute,
    operator: operator,
    limit: limit,
    showMore: showMore,
    showMoreLimit: showMoreLimit,
    sortBy: sortBy,
    escapeFacetValues: escapeFacetValues,
    transformItems: transformItems
  }, {
    $$widgetType: 'ais.refinementList'
  }),
      canRefine = _useRefinementList.canRefine,
      canToggleShowMore = _useRefinementList.canToggleShowMore,
      isFromSearch = _useRefinementList.isFromSearch,
      isShowingMore = _useRefinementList.isShowingMore,
      items = _useRefinementList.items,
      refine = _useRefinementList.refine,
      searchForItems = _useRefinementList.searchForItems,
      toggleShowMore = _useRefinementList.toggleShowMore;

  var _useState = (0, _react.useState)(''),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var inputRef = (0, _react.useRef)(null);

  function setQuery(newQuery) {
    setInputValue(newQuery);
    searchForItems(newQuery);
  }

  function onRefine(item) {
    refine(item.value);
    setQuery('');
  }

  function onChange(event) {
    setQuery(event.currentTarget.value);
  }

  function onReset() {
    setQuery('');
  }

  function onSubmit() {
    if (items.length > 0) {
      refine(items[0].value);
      setQuery('');
    }
  }

  var uiProps = {
    items: items,
    canRefine: canRefine,
    onRefine: onRefine,
    query: inputValue,
    searchBox: searchable && /*#__PURE__*/_react.default.createElement(_SearchBox.SearchBox, {
      inputRef: inputRef,
      placeholder: searchablePlaceholder,
      isSearchStalled: false,
      value: inputValue,
      onChange: onChange,
      onReset: onReset,
      onSubmit: onSubmit,
      translations: {
        submitTitle: 'Submit the search query.',
        resetTitle: 'Clear the search query.'
      }
    }),
    noResults: searchable && isFromSearch && items.length === 0 && 'No results.',
    canToggleShowMore: canToggleShowMore,
    onToggleShowMore: toggleShowMore,
    isShowingMore: isShowingMore
  };
  return /*#__PURE__*/_react.default.createElement(_RefinementList.RefinementList, (0, _extends2.default)({}, props, uiProps, {
    showMore: showMore
  }));
}