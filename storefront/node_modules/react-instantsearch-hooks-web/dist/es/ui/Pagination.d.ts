import React from 'react';
import type { CreateURL } from 'instantsearch.js';
export declare type PaginationTranslations = {
    /**
     * The label for the first page's button.
     */
    first: string;
    /**
     * The label for the previous page's button.
     */
    previous: string;
    /**
     * The label for the next page's button.
     */
    next: string;
    /**
     * The label for the last page's button.
     */
    last: string;
    /**
     * The label for a page's button.
     */
    page(currentPage: number): string;
    /**
     * The accessible label for the first page's button.
     */
    ariaFirst: string;
    /**
     * The accessible label for the previous page's button.
     */
    ariaPrevious: string;
    /**
     * The accessible label for the next page's button.
     */
    ariaNext: string;
    /**
     * The accessible label for the last page's button.
     */
    ariaLast: string;
    /**
     * The accessible label for a page's button.
     */
    ariaPage(currentPage: number): string;
};
export declare type PaginationProps = React.ComponentProps<'div'> & {
    classNames?: Partial<PaginationClassNames>;
    pages: number[];
    currentPage: number;
    isFirstPage: boolean;
    isLastPage: boolean;
    nbPages: number;
    showFirst?: boolean;
    showPrevious?: boolean;
    showNext?: boolean;
    showLast?: boolean;
    createURL: CreateURL<number>;
    onNavigate: (page: number) => void;
} & {
    translations: PaginationTranslations;
};
export declare type PaginationClassNames = {
    /**
     * Class names to apply to the root element
     */
    root: string;
    /**
     * Class names to apply to the root element when there are no refinements possible
     */
    noRefinementRoot: string;
    /**
     * Class names to apply to the list element
     */
    list: string;
    /**
     * Class names to apply to each item element
     */
    item: string;
    /**
     * Class names to apply to the first page element
     */
    firstPageItem: string;
    /**
     * Class names to apply to the previous page element
     */
    previousPageItem: string;
    /**
     * Class names to apply to each page element
     */
    pageItem: string;
    /**
     * Class names to apply to a selected page element
     */
    selectedItem: string;
    /**
     * Class names to apply to a disabled page element
     */
    disabledItem: string;
    /**
     * Class names to apply to the next page element
     */
    nextPageItem: string;
    /**
     * Class names to apply to the last page element
     */
    lastPageItem: string;
    /**
     * Class names to apply to each link element
     */
    link: string;
};
export declare function Pagination({ pages, currentPage, nbPages, isFirstPage, isLastPage, showFirst, showPrevious, showNext, showLast, createURL, onNavigate, translations, classNames, ...props }: PaginationProps): JSX.Element;
