import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["searchable", "searchablePlaceholder", "attribute", "operator", "limit", "showMore", "showMoreLimit", "sortBy", "escapeFacetValues", "transformItems"];
import React, { useRef, useState } from 'react';
import { useRefinementList } from 'react-instantsearch-hooks';
import { RefinementList as RefinementListUiComponent } from "../ui/RefinementList.js";
import { SearchBox as SearchBoxUiComponent } from "../ui/SearchBox.js";
export function RefinementList(_ref) {
  var searchable = _ref.searchable,
      searchablePlaceholder = _ref.searchablePlaceholder,
      attribute = _ref.attribute,
      operator = _ref.operator,
      limit = _ref.limit,
      showMore = _ref.showMore,
      showMoreLimit = _ref.showMoreLimit,
      sortBy = _ref.sortBy,
      escapeFacetValues = _ref.escapeFacetValues,
      transformItems = _ref.transformItems,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useRefinementList = useRefinementList({
    attribute: attribute,
    operator: operator,
    limit: limit,
    showMore: showMore,
    showMoreLimit: showMoreLimit,
    sortBy: sortBy,
    escapeFacetValues: escapeFacetValues,
    transformItems: transformItems
  }, {
    $$widgetType: 'ais.refinementList'
  }),
      canRefine = _useRefinementList.canRefine,
      canToggleShowMore = _useRefinementList.canToggleShowMore,
      isFromSearch = _useRefinementList.isFromSearch,
      isShowingMore = _useRefinementList.isShowingMore,
      items = _useRefinementList.items,
      refine = _useRefinementList.refine,
      searchForItems = _useRefinementList.searchForItems,
      toggleShowMore = _useRefinementList.toggleShowMore;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var inputRef = useRef(null);

  function setQuery(newQuery) {
    setInputValue(newQuery);
    searchForItems(newQuery);
  }

  function onRefine(item) {
    refine(item.value);
    setQuery('');
  }

  function onChange(event) {
    setQuery(event.currentTarget.value);
  }

  function onReset() {
    setQuery('');
  }

  function onSubmit() {
    if (items.length > 0) {
      refine(items[0].value);
      setQuery('');
    }
  }

  var uiProps = {
    items: items,
    canRefine: canRefine,
    onRefine: onRefine,
    query: inputValue,
    searchBox: searchable && /*#__PURE__*/React.createElement(SearchBoxUiComponent, {
      inputRef: inputRef,
      placeholder: searchablePlaceholder,
      isSearchStalled: false,
      value: inputValue,
      onChange: onChange,
      onReset: onReset,
      onSubmit: onSubmit,
      translations: {
        submitTitle: 'Submit the search query.',
        resetTitle: 'Clear the search query.'
      }
    }),
    noResults: searchable && isFromSearch && items.length === 0 && 'No results.',
    canToggleShowMore: canToggleShowMore,
    onToggleShowMore: toggleShowMore,
    isShowingMore: isShowingMore
  };
  return /*#__PURE__*/React.createElement(RefinementListUiComponent, _extends({}, props, uiProps, {
    showMore: showMore
  }));
}