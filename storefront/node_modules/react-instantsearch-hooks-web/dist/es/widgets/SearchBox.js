import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
var _excluded = ["queryHook", "searchAsYouType"];
import React, { useRef, useState } from 'react';
import { useSearchBox } from 'react-instantsearch-hooks';
import { SearchBox as SearchBoxUiComponent } from "../ui/SearchBox.js";
export function SearchBox(_ref) {
  var queryHook = _ref.queryHook,
      _ref$searchAsYouType = _ref.searchAsYouType,
      searchAsYouType = _ref$searchAsYouType === void 0 ? true : _ref$searchAsYouType,
      props = _objectWithoutProperties(_ref, _excluded);

  var _useSearchBox = useSearchBox({
    queryHook: queryHook
  }, {
    $$widgetType: 'ais.searchBox'
  }),
      query = _useSearchBox.query,
      refine = _useSearchBox.refine,
      isSearchStalled = _useSearchBox.isSearchStalled;

  var _useState = useState(query),
      _useState2 = _slicedToArray(_useState, 2),
      inputValue = _useState2[0],
      setInputValue = _useState2[1];

  var inputRef = useRef(null);

  function setQuery(newQuery) {
    setInputValue(newQuery);

    if (searchAsYouType) {
      refine(newQuery);
    }
  }

  function onReset() {
    setQuery('');
  }

  function onChange(event) {
    setQuery(event.currentTarget.value);
  }

  function onSubmit(event) {
    if (!searchAsYouType) {
      refine(inputValue);
    }

    if (props.onSubmit) {
      props.onSubmit(event);
    }
  } // Track when the InstantSearch query changes to synchronize it with
  // the React state.
  // We bypass the state update if the input is focused to avoid concurrent
  // updates when typing.


  if (query !== inputValue && document.activeElement !== inputRef.current) {
    setInputValue(query);
  }

  var uiProps = {
    inputRef: inputRef,
    isSearchStalled: isSearchStalled,
    onChange: onChange,
    onReset: onReset,
    onSubmit: onSubmit,
    value: inputValue,
    translations: {
      submitTitle: 'Submit the search query.',
      resetTitle: 'Clear the search query.'
    }
  };
  return /*#__PURE__*/React.createElement(SearchBoxUiComponent, _extends({}, props, uiProps));
}