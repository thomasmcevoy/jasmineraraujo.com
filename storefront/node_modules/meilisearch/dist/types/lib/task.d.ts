import { Config, Task, WaitOptions, Result } from '../types';
import { HttpRequests } from './http-requests';
declare class TaskClient {
    httpRequest: HttpRequests;
    constructor(config: Config);
    getClientTask(uid: string | number): Promise<Task>;
    getClientTasks(): Promise<Result<Task[]>>;
    getIndexTask(indexUid: string | number, taskId: number): Promise<Task>;
    getIndexTasks(indexUid: string | number): Promise<Result<Task[]>>;
    /**
     * Wait for a task to be processed.
     *
     * @param {number} uid Task identifier
     * @param {WaitOptions} options Additional configuration options
     * @returns {Promise<Task>} Promise returning a task after it has been processed
     */
    waitForClientTask(taskId: number, { timeOutMs, intervalMs }?: WaitOptions): Promise<Task>;
    /**
     * Waits for multiple tasks to be processed
     *
     * @param {number} taskIds Tasks identifier list
     * @param {WaitOptions} options Wait options
     * @returns {Promise<Result<Task[]>>} Promise returning a list of tasks after they have been processed
     */
    waitForClientTasks(taskIds: number[], { timeOutMs, intervalMs }?: WaitOptions): Promise<Result<Task[]>>;
    /**
     * Waits for a task to be processed
     *
     * @param {number} taskId Task identifier
     * @param {WaitOptions} options Wait options
     * @returns {Promise<Task>} Promise returning a task after it has been processed
     */
    waitForIndexTask(indexUid: number | string, taskId: number, { timeOutMs, intervalMs }?: WaitOptions): Promise<Task>;
}
export { TaskClient };
//# sourceMappingURL=task.d.ts.map