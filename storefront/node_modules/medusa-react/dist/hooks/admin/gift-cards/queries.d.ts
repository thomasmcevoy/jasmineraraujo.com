import { AdminGiftCardsListRes, AdminGiftCardsRes, AdminGetGiftCardsParams } from "@medusajs/medusa";
import { Response } from "@medusajs/medusa-js";
import { UseQueryOptionsWrapper } from "../../../types";
export declare const adminGiftCardKeys: import("../../../types").TQueryKey<"admin_gift_cards", any, string>;
declare type GiftCardQueryKeys = typeof adminGiftCardKeys;
export declare const useAdminGiftCards: (query?: AdminGetGiftCardsParams, options?: UseQueryOptionsWrapper<Response<AdminGiftCardsListRes>, Error, ReturnType<GiftCardQueryKeys["list"]>>) => {
    readonly error: null;
    readonly isError: false;
    readonly isIdle: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "idle";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: import("@medusajs/medusa").GiftCard[] | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isIdle: false;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: import("@medusajs/medusa").GiftCard[] | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isIdle: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: import("@medusajs/medusa").GiftCard[] | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isIdle: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: import("@medusajs/medusa").GiftCard[] | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isIdle: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsListRes>, Error>>;
    readonly remove: () => void;
    readonly limit?: number | undefined;
    readonly offset?: number | undefined;
    readonly count?: number | undefined;
    readonly gift_cards?: import("@medusajs/medusa").GiftCard[] | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
};
export declare const useAdminGiftCard: (id: string, options?: UseQueryOptionsWrapper<Response<AdminGiftCardsRes>, Error, ReturnType<GiftCardQueryKeys["detail"]>>) => {
    readonly error: null;
    readonly isError: false;
    readonly isIdle: true;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "idle";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly gift_card?: import("@medusajs/medusa").GiftCard | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isIdle: false;
    readonly isLoading: false;
    readonly isLoadingError: true;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly gift_card?: import("@medusajs/medusa").GiftCard | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isIdle: false;
    readonly isLoading: true;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: false;
    readonly status: "loading";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly gift_card?: import("@medusajs/medusa").GiftCard | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
} | {
    readonly error: Error;
    readonly isError: true;
    readonly isIdle: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: true;
    readonly isSuccess: false;
    readonly status: "error";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly gift_card?: import("@medusajs/medusa").GiftCard | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
} | {
    readonly error: null;
    readonly isError: false;
    readonly isIdle: false;
    readonly isLoading: false;
    readonly isLoadingError: false;
    readonly isRefetchError: false;
    readonly isSuccess: true;
    readonly status: "success";
    readonly dataUpdatedAt: number;
    readonly errorUpdatedAt: number;
    readonly failureCount: number;
    readonly errorUpdateCount: number;
    readonly isFetched: boolean;
    readonly isFetchedAfterMount: boolean;
    readonly isFetching: boolean;
    readonly isPlaceholderData: boolean;
    readonly isPreviousData: boolean;
    readonly isRefetching: boolean;
    readonly isStale: boolean;
    readonly refetch: <TPageData>(options?: (import("react-query").RefetchOptions & import("react-query").RefetchQueryFilters<TPageData>) | undefined) => Promise<import("react-query").QueryObserverResult<Response<AdminGiftCardsRes>, Error>>;
    readonly remove: () => void;
    readonly gift_card?: import("@medusajs/medusa").GiftCard | undefined;
    readonly response?: import("@medusajs/medusa-js").HTTPResponse | undefined;
};
export {};
