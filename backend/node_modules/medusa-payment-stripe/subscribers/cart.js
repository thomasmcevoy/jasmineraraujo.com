"use strict";

function _instanceof(left, right) { if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) { return !!right[Symbol.hasInstance](left); } else { return left instanceof right; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!_instanceof(instance, Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CartSubscriber = /*#__PURE__*/function () {
  function CartSubscriber(_ref) {
    var _this = this;

    var cartService = _ref.cartService,
        customerService = _ref.customerService,
        paymentProviderService = _ref.paymentProviderService,
        eventBusService = _ref.eventBusService;

    _classCallCheck(this, CartSubscriber);

    this.cartService_ = cartService;
    this.customerService_ = customerService;
    this.paymentProviderService_ = paymentProviderService;
    this.eventBus_ = eventBusService;
    this.eventBus_.subscribe("cart.customer_updated", /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(cart) {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _this.onCustomerUpdated(cart);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }());
  }

  _createClass(CartSubscriber, [{
    key: "onCustomerUpdated",
    value: function () {
      var _onCustomerUpdated = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(cartId) {
        var _cart$payment_session;

        var cart, session;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.cartService_.retrieve(cartId, {
                  select: ["subtotal", "tax_total", "shipping_total", "discount_total", "total"],
                  relations: ["items", "billing_address", "shipping_address", "region", "region.payment_providers", "items", "items.adjustments", "payment_sessions", "customer"]
                });

              case 2:
                cart = _context2.sent;

                if ((_cart$payment_session = cart.payment_sessions) !== null && _cart$payment_session !== void 0 && _cart$payment_session.length) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", Promise.resolve());

              case 5:
                session = cart.payment_sessions.find(function (ps) {
                  return ps.provider_id === "stripe";
                });

                if (!session) {
                  _context2.next = 10;
                  break;
                }

                _context2.next = 9;
                return this.paymentProviderService_.updateSession(session, cart);

              case 9:
                return _context2.abrupt("return", _context2.sent);

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function onCustomerUpdated(_x2) {
        return _onCustomerUpdated.apply(this, arguments);
      }

      return onCustomerUpdated;
    }()
  }]);

  return CartSubscriber;
}();

var _default = CartSubscriber;
exports["default"] = _default;