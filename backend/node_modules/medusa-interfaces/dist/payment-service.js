"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var base_service_1 = __importDefault(require("./base-service"));
/**
 * The interface that all payment services must inherit from. The intercace
 * provides the necessary methods for creating, authorizing and managing
 * payments.
 * @interface
 */
var BasePaymentService = /** @class */ (function (_super) {
    __extends(BasePaymentService, _super);
    function BasePaymentService() {
        return _super.call(this) || this;
    }
    BasePaymentService.prototype.getIdentifier = function () {
        return this.constructor.identifier;
    };
    /**
     * Used to create a payment to be processed with the service's payment gateway.
     * @param cart {object} - the cart that the payment should cover.
     * @return {Promise<{object}>} - returns a promise that resolves to an object
     * containing the payment data. This data will be saved to the cart for later
     * use.
     */
    BasePaymentService.prototype.createPayment = function (cart) {
        throw Error("createPayment must be overridden by the child class");
    };
    /**
     * Used to retrieve a payment.
     * @param cart {object} - the cart whose payment should be retrieved.
     * @return {Promise<{object}>} - returns a promise that resolves to the
     * payment object as stored with the provider.
     */
    BasePaymentService.prototype.retrievePayment = function (cart) {
        throw Error("getPayment must be overridden by the child class");
    };
    /**
     * Used to update a payment. This method is called when the cart is updated.
     * @param cart {object} - the cart whose payment should be updated.
     * @return {Promise<{object}>} - returns a promise that resolves to the
     * payment object as stored with the provider.
     */
    BasePaymentService.prototype.updatePayment = function (cart) {
        throw Error("updatePayment must be overridden by the child class");
    };
    BasePaymentService.prototype.getStatus = function () {
        throw Error("getStatus must be overridden by the child class");
    };
    BasePaymentService.prototype.authorizePayment = function () {
        throw Error("authorizePayment must be overridden by the child class");
    };
    BasePaymentService.prototype.capturePayment = function () {
        throw Error("capturePayment must be overridden by the child class");
    };
    BasePaymentService.prototype.refundPayment = function () {
        throw Error("refundPayment must be overridden by the child class");
    };
    BasePaymentService.prototype.deletePayment = function () {
        throw Error("deletePayment must be overridden by the child class");
    };
    /**
     * If the payment provider can save a payment method this function will
     * retrieve them.
     */
    BasePaymentService.prototype.retrieveSavedMethods = function (customer) {
        return Promise.resolve([]);
    };
    return BasePaymentService;
}(base_service_1.default));
exports.default = BasePaymentService;
//# sourceMappingURL=payment-service.js.map